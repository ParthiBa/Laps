<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2014-12-02T23:02:00Z</updated>
  <entry>
    <title>This Week in Spring - December 2, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/this-week-in-spring-december-2-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-12-02:1875</id>
    <updated>2014-12-02T23:02:00Z</updated>
    <content type="html">&lt;p&gt;
Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I'm at the  &lt;a href="http://www.therichwebexperience.com/conference/fort_lauderdale/2014/12/home"&gt;Rich Web Experience&lt;/a&gt; in Ft. Lauderdale, FL, joining my pal &lt;a href="http://twitter.com/mstine"&gt;Matt Stine&lt;/a&gt; for a workshop on building microservices with &lt;a href="http://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;, &lt;a href="http://spring.io/projects/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; and &lt;a href="http://cloudfoundry.org"&gt;Cloud Foundry&lt;/a&gt;.

 &lt;/p&gt;&lt;p&gt;
  So, without further ado, let's get to it:
&lt;/p&gt;
 

&lt;p&gt;&lt;/p&gt;&lt;ul&gt;
    &lt;li&gt;
      Dr. Dave Syer &lt;a href="https://spring.io/blog/2014/11/25/spring-cloud-1-0-0-m3-available-now"&gt;just announced the M3 release of Spring Cloud&lt;/a&gt;, complete with &lt;em&gt;loads&lt;/em&gt; of cool stuff, including a smarter Ribbon-enabled load-balancing &lt;code&gt;RestTemplate&lt;/code&gt;, a RabbitMQ-based aggregator for Hystrix Metrics based on Turbine 2, Spring Cloud for AWS support, and &lt;em&gt;much&lt;/em&gt; more
    &lt;/li&gt;
    &lt;li&gt;
      Spring ninja Sebastien Deleuze just announced &lt;a href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring"&gt;some of the amazing new features in Spring's Jackson support&lt;/a&gt;. My favorite? JSON + XML marshalling &lt;em&gt;with&lt;/em&gt; dynamic &lt;em&gt;views&lt;/em&gt;. Views are a  logical subset of attributes from a JSON structure that may be rendered  dynamically.
    &lt;/li&gt;
    &lt;li&gt;
      Check out &lt;a href="https://spring.io/blog/2014/11/26/spring-roo-1-3-1-rc1-available-with-important-bug-fixes"&gt;Spring Roo 1.3.1&lt;/a&gt; and includes bug-fixes for reverse engineering and third party addon installations. Thanks, community and  &lt;a href="http://www.disid.com/"&gt;Disid&lt;/a&gt; in particular for the updates!
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href="https://spring.io/blog/2014/12/02/spring-tool-suite-and-groovy-grails-tool-suite-3-6-3-released"&gt;Spring and Groovy &amp;amp; Grails Tool Suite lead Martin Lippert  just announced versions 3.6.3&lt;/a&gt;. The new release includes updated Spring Integration visualizations, a installed-by-default Cloud Foundry plugin and more. Check it out!
    &lt;/li&gt;
    &lt;li&gt;
      Want to learn about the Spring Integration Java configuration DSL in terms of a working, line-by-line example? Check out &lt;a href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial"&gt;this post by Java configuration DSL lead Artem Bilan&lt;/a&gt;  and if you want to see how it works on JDK 7 or earlier,  &lt;a href="https://spring.io/blog/2014/12/01/spring-integration-java-dsl-pre-java-8-line-by-line-tutorial"&gt;check out this post&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Spring Data lead Oliver Gierke just announced the &lt;a href="https://spring.io/blog/2014/12/01/first-milestone-of-spring-data-release-train-fowler-available"&gt;first milestone of the next Spring Data release train, Spring Data Fowler&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      The replay from the &lt;a href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-security-for-microservices-with-spring-and-oauth2"&gt;good Dr. David Syer's SpringOne2GX 2014 talk on security for microservices&lt;/a&gt; is now available online.
    &lt;/li&gt;
    &lt;li&gt;
      Additionally, check out &lt;a href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-spring-boot-and-netflix-oss"&gt;Dr. Syer and Spencer Gibb's talk introducing Spring Cloud&lt;/a&gt; to the world at SpringOne2GX 2014!
    &lt;/li&gt;
    &lt;li&gt;Check out the SpringOne2GX 2014 replay of Reactor project ninjas Jon Brisbin  and Stephane Maldini's talk: &lt;a href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-building-reactive-applications-with-reactor-and-the-reactive-streams-standa4d"&gt;Building Reactive applications with Reactor and the Reactive Streams standard&lt;/a&gt;
&lt;/li&gt;
    &lt;li&gt;
      Join Spring Integration project-lead Gary Russell for a not-to-be-missed webinar &lt;a href="https://spring.io/blog/2014/12/02/webinar-introducing-the-java-dsl-for-spring-integration"&gt;on January 27th that introduces the just-released Spring Integration Java configuration DSL&lt;/a&gt;!
    &lt;/li&gt;
    &lt;li&gt;
      You know what they say: go grid or go home! Or something like that…? &lt;em&gt;anyway&lt;/em&gt;, definitely check out my pal Luke Shannon's upcoming webinar &lt;a href="https://spring.io/blog/2014/12/02/webinar-building-scalable-data-applications-with-spring-and-gemfire"&gt;on building scalable data applications with Spring Data Gemfire&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Adao Feliz put together a nice &lt;a href="http://blog.adaofeliz.com/2014/11/21/first-look-spring-boot-and-docker/"&gt;post on using Spring Boot and Docker&lt;/a&gt;.
      It's pretty straightforward, so check it out!
    &lt;/li&gt;
    &lt;li&gt; The &lt;em&gt;All and Sundry &lt;/em&gt; blog has a nice post
      &lt;a href="http://www.java-allandsundry.com/2014/11/spring-resttemplate-with-linked-resource.html"&gt;on how to consume linked resources using Spring's &lt;code&gt;RestTemplate&lt;/code&gt;&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Check out the early bits for the &lt;a href="https://docs.google.com/document/d/1WWoQ_d5nR4-P6VfLbAAbzOZIvRj-Xdff2hsjM_ZWRUQ/mobilebasic?pli=1"&gt;next-gen Cloud Foundry built from the ground up on the Go language and supports Docker as a first-class citizen&lt;/a&gt;. If you know how to use Vagrant, it's dead simple to get a full &lt;em&gt;working&lt;/em&gt; Cloud Foundry cloud running on your laptop if you follow these instructions. Do try it out and let us know!  &lt;/li&gt;
  &lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Latest Jackson integration improvements in Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Sébastien Deleuze</name>
    </author>
    <id>tag:spring.io,2014-11-14:1840</id>
    <updated>2014-12-02T13:30:00Z</updated>
    <content type="html">&lt;p&gt;Spring &lt;a href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt; support has been improved lately to be more flexible and powerful. This blog post gives you an update about the most useful Jackson related features available in Spring Framework 4.x and Spring Boot. All the code samples are coming from this &lt;a href="https://github.com/sdeleuze/spring-jackson-demo"&gt;spring-jackson-demo&lt;/a&gt; sample application, feel free to have a look at the code.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-json-views" class="anchor" href="#json-views" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;JSON Views&lt;/h2&gt;

&lt;p&gt;It can sometimes be useful to filter contextually objects serialized to the HTTP response body. In order to provide such capabilities, Spring MVC now has builtin support for &lt;a href="http://wiki.fasterxml.com/JacksonJsonViews"&gt;Jackson’s Serialization Views&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following example illustrates how to use &lt;code&gt;@JsonView&lt;/code&gt; to filter fields depending on the context of serialization - e.g. getting a "summary" view when dealing with collections, and getting a full representation when dealing with a single resource:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;View&lt;/span&gt; {
    &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;Summary&lt;/span&gt; {}
}

&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;User&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;Long&lt;/span&gt; id;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; firstname;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; lastname;

    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; email;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; address;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; postalCode;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; city;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; country;
}

&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Message&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;Long&lt;/span&gt; id;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;LocalDate&lt;/span&gt; created;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; title;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;User&lt;/span&gt; author;

    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;User&lt;/span&gt;&amp;gt;&lt;/span&gt; recipients;

    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; body;
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Thanks to Spring MVC &lt;code&gt;@JsonView&lt;/code&gt; support, it is possible to choose, on a per handler method basis, which field should be serialized:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;RestController&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MessageController&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Autowired&lt;/span&gt;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;MessageService&lt;/span&gt; messageService;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-st"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;Message&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;getAllMessages&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; messageService&lt;span class="pl-k"&gt;.&lt;/span&gt;getAll();
    }

    &lt;span class="pl-st"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/{id}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Message&lt;/span&gt; &lt;span class="pl-en"&gt;getMessage&lt;/span&gt;(&lt;span class="pl-st"&gt;@PathVariable&lt;/span&gt; &lt;span class="pl-stj"&gt;Long&lt;/span&gt; &lt;span class="pl-v"&gt;id&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; messageService&lt;span class="pl-k"&gt;.&lt;/span&gt;get(id);
    }
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, if all messages are retrieved, only the most important fields are serialized thanks to the &lt;code&gt;getAllMessages()&lt;/code&gt; method annotated with &lt;code&gt;@JsonView(View.Summary.class)&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-javascript"&gt;&lt;pre&gt;[ {
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;created&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-11-14&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Info&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Brian&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clozel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }
}, {
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;created&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-11-14&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Warning&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stéphane&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nicoll&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }
}, {
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;created&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-11-14&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Alert&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Rossen&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stoyanchev&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }
} ]&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In Spring MVC default configuration, &lt;code&gt;MapperFeature.DEFAULT_VIEW_INCLUSION&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;. That means that when enabling a JSON View, non annotated fields or properties like &lt;code&gt;body&lt;/code&gt; or &lt;code&gt;recipients&lt;/code&gt; are not serialized.&lt;/p&gt;

&lt;p&gt;When a specific &lt;code&gt;Message&lt;/code&gt; is retrieved using the &lt;code&gt;getMessage()&lt;/code&gt; handler method (no JSON View specified), all fields are serialized as expected:&lt;/p&gt;

&lt;div class="highlight highlight-javascript"&gt;&lt;pre&gt;{
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;created&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-11-14&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;title&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Info&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;body&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;This is an information message&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;author&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Brian&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Clozel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bclozel@pivotal.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1 Jaures street&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postalCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;69003&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;city&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Lyon&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;country&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;France&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  },
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;recipients&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; [ {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;2&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stéphane&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Nicoll&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;snicoll@pivotal.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;42 Obama street&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postalCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;1000&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;city&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Brussel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;country&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Belgium&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  }, {
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;firstname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Rossen&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;lastname&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Stoyanchev&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;email&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;rstoyanchev@pivotal.io&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;address&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;3 Warren street&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;postalCode&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;10011&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;city&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;New York&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;country&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;USA&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
  } ]
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Only &lt;strong&gt;one&lt;/strong&gt; class or interface can be specified with the &lt;code&gt;@JsonView&lt;/code&gt; annotation, but you can use inheritance to represent JSON View hierarchies (if a field is part of a JSON View, it will be also part of parent view). For example, this handler method will serialize fields annotated with &lt;code&gt;@JsonView(View.Summary.class)&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;@JsonView(View.SummaryWithRecipients.class)&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;View&lt;/span&gt; {
    &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;Summary&lt;/span&gt; {}
    &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;SummaryWithRecipients&lt;/span&gt; &lt;span class="pl-s"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;Summary&lt;/span&gt; {}
}

&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Message&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;Long&lt;/span&gt; id;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;LocalDate&lt;/span&gt; created;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; title;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;Summary&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;User&lt;/span&gt; author;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;SummaryWithRecipients&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;User&lt;/span&gt;&amp;gt;&lt;/span&gt; recipients;

    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; body;
}

@&lt;span class="pl-stj"&gt;RestController&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;MessageController&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Autowired&lt;/span&gt;
    &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;MessageService&lt;/span&gt; messageService;

    &lt;span class="pl-st"&gt;@JsonView&lt;/span&gt;(&lt;span class="pl-stj"&gt;View&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;&lt;span class="pl-stj"&gt;SummaryWithRecipients&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
    &lt;span class="pl-st"&gt;@RequestMapping&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/with-recipients&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;Message&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;getAllMessagesWithRecipients&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; messageService&lt;span class="pl-k"&gt;.&lt;/span&gt;getAll();
    }
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JSON Views could also be specified when using &lt;code&gt;RestTemplate&lt;/code&gt; HTTP client or &lt;code&gt;MappingJackson2JsonView&lt;/code&gt; by wrapping the value to serialize in a &lt;code&gt;MappingJacksonValue&lt;/code&gt; as shown in this &lt;a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/test/java/org/springframework/web/client/RestTemplateIntegrationTests.java#L224"&gt;code sample&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-jsonp" class="anchor" href="#jsonp" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;JSONP&lt;/h2&gt;

&lt;p&gt;As described in the &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#mvc-ann-jsonp"&gt;reference documentation&lt;/a&gt;, you can enable &lt;a href="http://en.wikipedia.org/wiki/JSONP"&gt;JSONP&lt;/a&gt; for &lt;code&gt;@ResponseBody&lt;/code&gt; and &lt;code&gt;ResponseEntity&lt;/code&gt; methods by declaring an &lt;code&gt;@ControllerAdvice&lt;/code&gt; bean that extends &lt;code&gt;AbstractJsonpResponseBodyAdvice&lt;/code&gt; as shown below:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;ControllerAdvice&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;JsonpAdvice&lt;/span&gt; &lt;span class="pl-s"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;AbstractJsonpResponseBodyAdvice&lt;/span&gt; {

    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-en"&gt;JsonpAdvice&lt;/span&gt;() {
        &lt;span class="pl-v"&gt;super&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;callback&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
    }
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With such &lt;code&gt;@ControllerAdvice&lt;/code&gt; bean registered, it will be possible to request the JSON webservice from another domain using a &lt;code&gt;&amp;lt;script /&amp;gt;&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class="highlight highlight-html"&gt;&lt;pre&gt;&lt;span class="pl-s2"&gt;&amp;lt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-e"&gt;type&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;application/javascript&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s2"&gt;            &lt;span class="pl-e"&gt;src&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;http://mydomain.com/1.json?jsonp=parseResponse&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pl-s2"&gt;&amp;lt;/&lt;span class="pl-ent"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, the received payload would be:&lt;/p&gt;

&lt;div class="highlight highlight-javascript"&gt;&lt;pre&gt;parseResponse({
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;,
  &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;created&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;:&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;2014-11-14&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,
  ...
});&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JSONP is also supported and automatically enabled when using &lt;code&gt;MappingJackson2JsonView&lt;/code&gt; with a request that has a query parameter named jsonp or callback. The JSONP query parameter name(s) could be customized through the &lt;code&gt;jsonpParameterNames&lt;/code&gt; property.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-xml-support" class="anchor" href="#xml-support" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;XML support&lt;/h2&gt;

&lt;p&gt;Since 2.0 release, Jackson provides first class support for some other data formats than JSON. Spring Framework and Spring Boot provide builtin support for Jackson based XML serialization/deserialization.&lt;/p&gt;

&lt;p&gt;As soon as you include the &lt;a href="https://github.com/FasterXML/jackson-dataformat-xml"&gt;&lt;code&gt;jackson-dataformat-xml&lt;/code&gt;&lt;/a&gt; dependency to your project, it is automatically used instead of JAXB2.&lt;/p&gt;

&lt;p&gt;Using Jackson XML extension has several advantages over JAXB2:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both Jackson and JAXB annotations are recognized&lt;/li&gt;
&lt;li&gt;JSON View are supported, allowing you to build easily REST Webservices with the same filtered output for both XML and JSON data formats&lt;/li&gt;
&lt;li&gt;No need to annotate your class with &lt;code&gt;@XmlRootElement&lt;/code&gt;, each class serializable in JSON will serializable in XML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You usually also want to make sure that the XML library in use is Woodstox since:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is faster than Stax implementation provided with the JDK&lt;/li&gt;
&lt;li&gt;It avoids some known issues like adding unnecessary namespace prefixes&lt;/li&gt;
&lt;li&gt;Some features like pretty print don't work without it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use it, simply add the latest &lt;a href="http://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.codehaus.woodstox%22%20AND%20a%3A%22woodstox-core-asl%22"&gt;&lt;code&gt;woodstox-core-asl&lt;/code&gt;&lt;/a&gt; dependency available to your project.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-customizing-the-jackson-objectmapper" class="anchor" href="#customizing-the-jackson-objectmapper" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Customizing the Jackson ObjectMapper&lt;/h2&gt;

&lt;p&gt;Prior to Spring Framework 4.1.1, Jackson &lt;code&gt;HttpMessageConverter&lt;/code&gt;s were using &lt;code&gt;ObjectMapper&lt;/code&gt; default configuration. In order to provide a better and easily customizable default configuration, a new &lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html"&gt;&lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;&lt;/a&gt; has been introduced. It is the JavaConfig equivalent of the well known &lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperFactoryBean.html"&gt;&lt;code&gt;Jackson2ObjectMapperFactoryBean&lt;/code&gt;&lt;/a&gt; used in XML configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html"&gt;&lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt;&lt;/a&gt; provides a nice API to customize various Jackson settings while  retaining Spring Framework provided default ones. It also allows to create &lt;code&gt;ObjectMapper&lt;/code&gt; and &lt;code&gt;XmlMapper&lt;/code&gt; instances based on the same configuration.&lt;/p&gt;

&lt;p&gt;Both &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; and &lt;code&gt;Jackson2ObjectMapperFactoryBean&lt;/code&gt; define a better Jackson default configuration. For example, the &lt;a href="http://fasterxml.github.io/jackson-databind/javadoc/2.0.0/com/fasterxml/jackson/databind/DeserializationFeature.html#FAIL_ON_UNKNOWN_PROPERTIES"&gt;&lt;code&gt;DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES&lt;/code&gt;&lt;/a&gt; property set to false, in order to allow deserialization of JSON objects with unmapped properties.&lt;/p&gt;

&lt;p&gt;Jackson support for Java 8 Date &amp;amp; Time API data types is automatically registered when Java 8 is used and &lt;a href="https://github.com/FasterXML/jackson-datatype-jsr310"&gt;&lt;code&gt;jackson-datatype-jsr310&lt;/code&gt;&lt;/a&gt; is on the classpath. Joda-Time support is registered as well when &lt;a href="https://github.com/FasterXML/jackson-datatype-joda"&gt;&lt;code&gt;jackson-datatype-joda&lt;/code&gt;&lt;/a&gt; is part of your project dependencies.&lt;/p&gt;

&lt;p&gt;These classes also allow you to register easily Jackson &lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html#mixIn-java.lang.Class-java.lang.Class-"&gt;mixins&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html#modules-java.util.List-"&gt;modules&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.html#serializers-com.fasterxml.jackson.databind.JsonSerializer...-"&gt;serializers&lt;/a&gt; or even property naming strategy like &lt;code&gt;PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES&lt;/code&gt; if you want to have your &lt;code&gt;userName&lt;/code&gt; java property translated to &lt;code&gt;user_name&lt;/code&gt; in JSON.&lt;/p&gt;

&lt;h3&gt;
&lt;a id="user-content-with-spring-boot" class="anchor" href="#with-spring-boot" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;With Spring Boot&lt;/h3&gt;

&lt;p&gt;As described in the Spring Boot reference documentation, there are various ways to &lt;a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#howto-customize-the-jackson-objectmapper"&gt;customize the Jackson &lt;code&gt;ObjectMapper&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can for example enable/disable Jackson features easily by adding properties like &lt;code&gt;spring.jackson.serialization.indent_output=true&lt;/code&gt; to &lt;a href="http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-external-config-application-property-files"&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As an alternative, in the upcoming 1.2 release Spring Boot also allows to customize the Jackson configuration (JSON and XML) used by Spring MVC &lt;code&gt;HttpMessageConverter&lt;/code&gt;s by declaring a &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; &lt;code&gt;@Bean&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Jackson2ObjectMapperBuilder&lt;/span&gt; jacksonBuilder() {
    &lt;span class="pl-stj"&gt;Jackson2ObjectMapperBuilder&lt;/span&gt; builder &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Jackson2ObjectMapperBuilder&lt;/span&gt;();
    builder&lt;span class="pl-k"&gt;.&lt;/span&gt;indentOutput(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;dateFormat(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yyyy-MM-dd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
    &lt;span class="pl-k"&gt;return&lt;/span&gt; builder;
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is useful if you want to use advanced Jackson configuration not exposed through regular configuration keys.&lt;/p&gt;

&lt;h3&gt;
&lt;a id="user-content-without-spring-boot" class="anchor" href="#without-spring-boot" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Without Spring Boot&lt;/h3&gt;

&lt;p&gt;In a plain Spring Framework application, you can also use &lt;code&gt;Jackson2ObjectMapperBuilder&lt;/code&gt; to customize the XML and JSON &lt;code&gt;HttpMessageConverter&lt;/code&gt;s as shown bellow:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Configuration&lt;/span&gt;
@&lt;span class="pl-stj"&gt;EnableWebMvc&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;WebConfiguration&lt;/span&gt; &lt;span class="pl-s"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;WebMvcConfigurerAdapter&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;configureMessageConverters&lt;/span&gt;(&lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-st"&gt;HttpMessageConverter&amp;lt;?&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;converters&lt;/span&gt;) {
        &lt;span class="pl-stj"&gt;Jackson2ObjectMapperBuilder&lt;/span&gt; builder &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Jackson2ObjectMapperBuilder&lt;/span&gt;();
        builder&lt;span class="pl-k"&gt;.&lt;/span&gt;indentOutput(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;dateFormat(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;SimpleDateFormat&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;yyyy-MM-dd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;));
        converters&lt;span class="pl-k"&gt;.&lt;/span&gt;add(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;MappingJackson2HttpMessageConverter&lt;/span&gt;(builder&lt;span class="pl-k"&gt;.&lt;/span&gt;build()));
        converters&lt;span class="pl-k"&gt;.&lt;/span&gt;add(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;MappingJackson2XmlHttpMessageConverter&lt;/span&gt;(builder&lt;span class="pl-k"&gt;.&lt;/span&gt;createXmlMapper(&lt;span class="pl-c1"&gt;true&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;build()));
    }
}&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a id="user-content-more-to-come" class="anchor" href="#more-to-come" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;More to come&lt;/h2&gt;

&lt;p&gt;With the upcoming Spring Framework 4.1.3 release, thanks to the addition of a Spring context aware &lt;a href="http://wiki.fasterxml.com/HandlerInstantiator"&gt;&lt;code&gt;HandlerInstantiator&lt;/code&gt;&lt;/a&gt; (see &lt;a href="https://jira.spring.io/browse/SPR-10768"&gt;SPR-10768&lt;/a&gt; for more details), you will be able to autowire Jackson handlers (serializers, deserializers, type and type id resolvers).&lt;/p&gt;

&lt;p&gt;This will allow you to build, for example, a custom deserializer that will replace a field containing only a reference in the JSON payload by the full &lt;code&gt;Entity&lt;/code&gt; retrieved from the database.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Tool Suite and Groovy/Grails Tool Suite 3.6.3 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/spring-tool-suite-and-groovy-grails-tool-suite-3-6-3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2014-12-02:1867</id>
    <updated>2014-12-02T11:50:07Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;

&lt;p&gt;I am happy to announce the new release of our Eclipse-based tooling today:
The Spring Tool Suite (STS) 3.6.3 and the Groovy/Grails Tool Suite (GGTS) 3.6.3.&lt;/p&gt;

&lt;p&gt;Highlights from this release include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pivotal tc Server updated to 3.0.2 (incl. Spring Insight on Java8)&lt;/li&gt;
&lt;li&gt;Cloud Foundry for Eclipse now pre-installed&lt;/li&gt;
&lt;li&gt;Many new Spring Integration extensions supported in the graphical Spring Integration editor&lt;/li&gt;
&lt;li&gt;Gradle tooling has better handling for auto mapping of jar dependencies to project dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To download the distributions, please go visit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Tool Suite: &lt;a href="https://spring.io/tools/sts/all"&gt;https://spring.io/tools/sts/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Groovy/Grails Tool Suite: &lt;a href="https://spring.io/tools/ggts/all"&gt;https://spring.io/tools/ggts/all&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detailed new and noteworthy notes can be found here: &lt;a href="http://docs.spring.io/sts/nan/v363/NewAndNoteworthy.html"&gt;STS/GGTS 3.6.3 New &amp;amp; Noteworthy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;STS/GGTS 3.6.4 is scheduled to ship in March 2015, shortly after the Eclipse Luna SR2 release.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Security for Microservices with Spring and OAuth2</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-security-for-microservices-with-spring-and-oauth2" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-12-02:1872</id>
    <updated>2014-12-02T10:50:00Z</updated>
    <content type="html">&lt;p&gt; Security for Microservices with Spring and OAuth2 &lt;/p&gt;

&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;

&lt;p&gt;Speaker: Dr. David Syer &lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/syer-microservicesecurity"&gt;http://www.slideshare.net/SpringCentral/syer-microservicesecurity&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;OAuth2 is a lightweight security protocol that is well-suited for use with HTTP, the protocol at the heart of many modern architectures. Spring Security OAuth2 has a load of new features, not the least of which being the `@Configuration` support in version 2.0. Combine these with Spring Boot and you have a platform which can get you a secure HTTP service application in about 20 lines of code. This presentation shows how the combination of rapid development and production-ready features in the modern Spring stack are a perfect mixture for developing secure components in a system composed of microservices. We explore the new features in Spring OAuth2, guide you through the choice of which to use and when, and show how easy they are to enable quickly.  This is the 90 minute version of the same talk that was on the Spring webinar program recently.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/MLfL1NpwUC4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Spring Boot and Netflix OSS</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-spring-boot-and-netflix-oss" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-12-02:1871</id>
    <updated>2014-12-02T10:31:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;

&lt;p&gt;Speaker: Spencer Gibb, Dr. David Syer &lt;/p&gt;

&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/syer-gibbcloud"&gt;http://www.slideshare.net/SpringCentral/syer-gibbcloud&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Learn basic concepts about Spring Boot and Netflix OSS software and how to integrate Netflix OSS technologies into Spring Boot including: distributed configuration using Spring and Archaius Eureka (service registration and discovery) Feign (easy rest clients) Ribbon (client side load balancing) Hystrix (circuit breaker/fault tolerance library) RxJava (Reactive Programming library) Zuul (routing) Turbine and Hystrix Dashboard (service health dashboard)&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/X5DRXCKJH_M" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay:  Building Reactive applications with Reactor and the Reactive Streams standa4d</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/springone2gx-2014-replay-building-reactive-applications-with-reactor-and-the-reactive-streams-standa4d" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-12-02:1870</id>
    <updated>2014-12-02T10:21:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;

&lt;p&gt;Speakers: Jon Brisbin, Stephane Maldini &lt;/p&gt;

&lt;p&gt;Slides:&lt;a href="http://www.slideshare.net/SpringCentral/spring-one2gx-2014reactivestreams-41130280"&gt;http://www.slideshare.net/SpringCentral/spring-one2gx-2014reactivestreams-41130280&lt;/a&gt; &lt;/p&gt;

&lt;p&gt; This session will introduce attendees to the Reactive Streams project, a new initiative between reactive software's heavy-hitters like Pivotal, Typesafe, Netflix, Twitter, and others. Since Pivotal's own Reactor framework implements this informal standard, we'll demonstrate how to build applications that can connect to other Reactive Streams implementations in a completely non-blocking way.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/AvwZEWu5PPc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Introducing the Java DSL for Spring Integration</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/webinar-introducing-the-java-dsl-for-spring-integration" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-12-02:1869</id>
    <updated>2014-12-02T10:02:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Gary Russell, Pivotal &lt;/p&gt;

&lt;p&gt;The Spring Integration JavaConfig and DSL extension provides a set of convenient Builders and a fluent API to configure Spring Integration message flows from Spring @Configuration classes. The Java DSL for Spring Integration is essentially a facade for Spring Integration. The DSL provides a simple way to embed Spring Integration Message Flows into your application using the fluent Builder pattern together with existing Java and Annotation configurations from Spring Framework and Spring Integration as well. Another useful tool to simplify configuration is Java 8 Lambdas.&lt;/p&gt;

&lt;p&gt;Tuesday, Jan 27th, 2015 3:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMIntroducingtheJavaDSLforSpringIntegration_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tuesday, Jan 27th, 2015 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMIntroducingtheJavaDSLforSpringIntegration_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Building Scalable Data Applications with Spring and GemFire</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/02/webinar-building-scalable-data-applications-with-spring-and-gemfire" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-12-02:1868</id>
    <updated>2014-12-02T09:57:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Luke Shannon &lt;/p&gt;

&lt;p&gt;GemFire is Pivotal's distributed In Memory Data grid. In this session we will cover simplifying configuring a GemFire grid using Spring Data GemFire, and explore how data is dynamically distributed and made highly available as the grid resources are increased or decreased to meet increased client demand. GemFire access and testing patterns using Spring will be reviewed in detail.  We will walk through creating a domain object and using Spring Data GemFire Repositories to perform CRUD operations on a GemFire grid, creating a Spring MVC/Spring Boot application that uses GemFire as its persistence layer, review how Spring Boot and Spring Data GemFire can be used to help with GemFire test cases and how Spring Data GemFire can make creation and execution of GemFire functions easier. We will also explore how Spring XD can be used to load and monitor data changes in the grid. This will be a hands on, code oriented session. &lt;/p&gt;

&lt;p&gt;Tuesday, Jan 14th, 2015 3:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMBuildingScalableDataApplicationswithSpringandGemFire_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tuesday, Jan 14th, 2014 10:00AM PST (San Francisco GMT-08:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMBuildingScalableDataApplicationswithSpringandGemFire_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>First Milestone of Spring Data Release Train Fowler Available</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/01/first-milestone-of-spring-data-release-train-fowler-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2014-12-01:1866</id>
    <updated>2014-12-01T14:26:35Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team, I am happy to announce the first milestone of the Spring Data Release train &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Fowler"&gt;Fowler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The release ships &lt;a href="https://jira.spring.io/issues/?filter=14842"&gt;170 tickets fixed&lt;/a&gt;, 119 of them unique to the Fowler release train. Find a curated changelog &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Fowler"&gt;here&lt;/a&gt;. The highlights of the release include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upgrades to Spring 4.0.8 and Querydsl 3.6.0.&lt;/li&gt;
&lt;li&gt;Performance improvements in converter subsystem by using byte-code generation.&lt;/li&gt;
&lt;li&gt;Out-of-the-box support for JSR-310 date/time types (MongoDB).&lt;/li&gt;
&lt;li&gt;Various (performance) improvements in the usage of SpEL (JPA).&lt;/li&gt;
&lt;li&gt;Support for &lt;code&gt;$bit&lt;/code&gt;, &lt;code&gt;$mul&lt;/code&gt; and &lt;code&gt;$position&lt;/code&gt; operators (MongoDB).&lt;/li&gt;
&lt;li&gt;Improved proxy-id detection for JPA and REST.&lt;/li&gt;
&lt;li&gt;Introdcution of &lt;code&gt;QueryDslPredicateExceutor.findAll(OrderSpecifier&amp;lt;?&amp;gt;... orders)&lt;/code&gt; (Querydsl).&lt;/li&gt;
&lt;li&gt;CDI repository extension for Cassandra module.&lt;/li&gt;
&lt;li&gt;Upgrade to Gemfire 8 (Gemfire).&lt;/li&gt;
&lt;li&gt;Version property based ETag generation (REST).&lt;/li&gt;
&lt;li&gt;Upgrades to Solr 4.10.1, Elasticsearch 1.2, Neo4J 2.1.5, compatibility with upcoming MongoDB server and driver.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the participating modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Data Commons 1.10 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/1.10.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.10.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data JPA 1.8 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/1.8.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.8.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data MongoDB 1.7 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/1.7.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.7.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Neo4j 3.3 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/3.3.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/3.3.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Solr 1.4 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/1.4.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/1.4.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Couchbase 1.3 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/1.3.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/1.3.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Cassandra 1.2 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/1.2.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.2.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Elasticsearch 1.2 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/1.2.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.2.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Gemfire 1.6 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-gemfire/1.6.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.6.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data Redis 1.5 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/1.5.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.5.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Spring Data REST 2.3 M1 - &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/2.3.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.3.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be sure to check out the already &lt;a href="https://github.com/spring-projects/spring-data-examples"&gt;updated examples&lt;/a&gt;. Get in touch via &lt;a href="https://twitter.com/SpringData"&gt;Twitter&lt;/a&gt;, &lt;a href="http://stackoverflow.com/questions/tagged/spring-data"&gt;StackOverflow&lt;/a&gt; or &lt;a href="http://jira.spring.io"&gt;JIRA&lt;/a&gt;. We're looking forward to your feedback!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Java DSL (pre Java 8): Line by line tutorial</title>
    <link rel="alternate" href="https://spring.io/blog/2014/12/01/spring-integration-java-dsl-pre-java-8-line-by-line-tutorial" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-11-28:1865</id>
    <updated>2014-12-01T08:20:47Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community!&lt;/p&gt;

&lt;p&gt;Recently we published the
&lt;a href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial"&gt;Spring Integration Java DSL: Line by line tutorial&lt;/a&gt;,
 which uses Java 8 Lambdas extensively. We received some feedback that this is good introduction
 to the DSL, but a similar tutorial is needed for those users, who can't move to the Java 8 or aren't yet familiar
 with &lt;code&gt;Lambdas&lt;/code&gt;, but wish to take advantage&lt;/p&gt;

&lt;p&gt;So, to help those Spring Integration users who want to moved from XML configuration to Java &amp;amp; Annotation
configuration, we provide this &lt;code&gt;line-by-line tutorial&lt;/code&gt; to demonstrate that, even without &lt;code&gt;Lambdas&lt;/code&gt;, we gain
a lot from Spring Integration Java DSL usage. Although, most will agree that the lambda syntax provides for a
more succinct definition.&lt;/p&gt;

&lt;p&gt;We analyse here the same &lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/dsl/cafe-dsl"&gt;Cafe Demo&lt;/a&gt; sample,
 but using the pre Java 8 variant for configuration. Many options are the same, so we just copy/paste their description here to
 achieve a complete picture. Since this Spring Integration Java DSL configuration is quite different to the
 Java 8 lambda style, it will be useful for all users to get a knowlage how we can achieve the same result with a rich variety
 of options provided by the Spring Integration Java DSL.&lt;/p&gt;

&lt;p&gt;The source code for our application is placed in a single class, which is a &lt;code&gt;Boot&lt;/code&gt; application;
significant lines are annotated with a number corresponding to the comments, which follow:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;SpringBootApplication&lt;/span&gt;                                                   &lt;span class="pl-c"&gt;// 1&lt;/span&gt;
@&lt;span class="pl-stj"&gt;IntegrationComponentScan&lt;/span&gt;                                                &lt;span class="pl-c"&gt;// 2&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt; {

  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;(&lt;span class="pl-st"&gt;String&lt;/span&gt;[] &lt;span class="pl-v"&gt;args&lt;/span&gt;) &lt;span class="pl-s"&gt;throws&lt;/span&gt; &lt;span class="pl-stj"&gt;Exception&lt;/span&gt; {
    &lt;span class="pl-stj"&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class="pl-k"&gt;=&lt;/span&gt;
            &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);              &lt;span class="pl-c"&gt;// 3&lt;/span&gt;

    &lt;span class="pl-stj"&gt;Cafe&lt;/span&gt; cafe &lt;span class="pl-k"&gt;=&lt;/span&gt; ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;getBean(&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);                                 &lt;span class="pl-c"&gt;// 4&lt;/span&gt;
    &lt;span class="pl-k"&gt;for&lt;/span&gt; (&lt;span class="pl-st"&gt;int&lt;/span&gt; i &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;; i &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;; i&lt;span class="pl-k"&gt;++&lt;/span&gt;) {                                     &lt;span class="pl-c"&gt;// 5&lt;/span&gt;
      &lt;span class="pl-stj"&gt;Order&lt;/span&gt; order &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Order&lt;/span&gt;(i);
      order&lt;span class="pl-k"&gt;.&lt;/span&gt;addItem(&lt;span class="pl-stj"&gt;DrinkType&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;LATTE&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;);
      order&lt;span class="pl-k"&gt;.&lt;/span&gt;addItem(&lt;span class="pl-stj"&gt;DrinkType&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;MOCHA&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;);
      cafe&lt;span class="pl-k"&gt;.&lt;/span&gt;placeOrder(order);
    }

    &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit 'Enter' to terminate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);                      &lt;span class="pl-c"&gt;// 6&lt;/span&gt;
    &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;in&lt;span class="pl-k"&gt;.&lt;/span&gt;read();
    ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;close();
  }

  &lt;span class="pl-st"&gt;@MessagingGateway&lt;/span&gt;                                                      &lt;span class="pl-c"&gt;// 7&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;Cafe&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Gateway&lt;/span&gt;(&lt;span class="pl-c1"&gt;requestChannel&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)                            &lt;span class="pl-c"&gt;// 8&lt;/span&gt;
    &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;placeOrder&lt;/span&gt;(&lt;span class="pl-stj"&gt;Order&lt;/span&gt; &lt;span class="pl-v"&gt;order&lt;/span&gt;);                                        &lt;span class="pl-c"&gt;// 9&lt;/span&gt;

  }

  &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-s"&gt;final&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; hotDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();

  &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-s"&gt;final&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; coldDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();    &lt;span class="pl-c"&gt;// 10&lt;/span&gt;

  &lt;span class="pl-st"&gt;@Autowired&lt;/span&gt;
  &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;CafeAggregator&lt;/span&gt; cafeAggregator;                                 &lt;span class="pl-c"&gt;// 11&lt;/span&gt;

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;DEFAULT_POLLER&lt;/span&gt;)
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt; &lt;span class="pl-en"&gt;poller&lt;/span&gt;() {                                       &lt;span class="pl-c"&gt;// 12&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;Pollers&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;fixedDelay(&lt;span class="pl-c1"&gt;1000&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;get();
  }

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
  &lt;span class="pl-st"&gt;@SuppressWarnings&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;unchecked&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;orders&lt;/span&gt;() {                                      &lt;span class="pl-c"&gt;// 13&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)                         &lt;span class="pl-c"&gt;// 14&lt;/span&gt;
      .split(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.items&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, (&lt;span class="pl-stj"&gt;Consumer&lt;/span&gt;) &lt;span class="pl-c1"&gt;null&lt;/span&gt;)                           &lt;span class="pl-c"&gt;// 15&lt;/span&gt;
      .channel(&lt;span class="pl-stj"&gt;MessageChannels&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;executor(&lt;span class="pl-stj"&gt;Executors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;newCachedThreadPool()))&lt;span class="pl-c"&gt;// 16&lt;/span&gt;
      .route(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,                                             &lt;span class="pl-c"&gt;// 17&lt;/span&gt;
        &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;Consumer&amp;lt;&lt;span class="pl-st"&gt;RouterSpec&amp;lt;&lt;span class="pl-stj"&gt;ExpressionEvaluatingRouter&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;() {         &lt;span class="pl-c"&gt;// 18&lt;/span&gt;

          &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
          &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;accept&lt;/span&gt;(&lt;span class="pl-st"&gt;RouterSpec&amp;lt;&lt;span class="pl-stj"&gt;ExpressionEvaluatingRouter&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;spec&lt;/span&gt;) {
            spec&lt;span class="pl-k"&gt;.&lt;/span&gt;channelMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
                .channelMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;false&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);                         &lt;span class="pl-c"&gt;// 19&lt;/span&gt;
          }

        })
      .get();                                                            &lt;span class="pl-c"&gt;// 20&lt;/span&gt;
  }

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;icedFlow&lt;/span&gt;() {                                    &lt;span class="pl-c"&gt;// 21&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-stj"&gt;MessageChannels&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;))      &lt;span class="pl-c"&gt;// 22&lt;/span&gt;
      .handle(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;GenericHandler&amp;lt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;&amp;gt;&lt;/span&gt;() {                          &lt;span class="pl-c"&gt;// 23&lt;/span&gt;

        &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Object&lt;/span&gt; &lt;span class="pl-en"&gt;handle&lt;/span&gt;(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt; &lt;span class="pl-v"&gt;payload&lt;/span&gt;, &lt;span class="pl-st"&gt;Map&amp;lt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;, &lt;span class="pl-stj"&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;headers&lt;/span&gt;) {
          &lt;span class="pl-stj"&gt;Uninterruptibles&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;sleepUninterruptibly(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;);
          &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
            &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared cold drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; coldDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
            &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber() &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload);
          &lt;span class="pl-k"&gt;return&lt;/span&gt; payload;                                                &lt;span class="pl-c"&gt;// 24&lt;/span&gt;
        }

      })
      .channel(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;output&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)                                                 &lt;span class="pl-c"&gt;// 25&lt;/span&gt;
      .get();
  }

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;hotFlow&lt;/span&gt;() {                                     &lt;span class="pl-c"&gt;// 26&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-stj"&gt;MessageChannels&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;))
      .handle(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;GenericHandler&amp;lt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;&amp;gt;&lt;/span&gt;() {

        &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Object&lt;/span&gt; &lt;span class="pl-en"&gt;handle&lt;/span&gt;(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt; &lt;span class="pl-v"&gt;payload&lt;/span&gt;, &lt;span class="pl-st"&gt;Map&amp;lt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;, &lt;span class="pl-stj"&gt;Object&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;headers&lt;/span&gt;) {
          &lt;span class="pl-stj"&gt;Uninterruptibles&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;sleepUninterruptibly(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;);    &lt;span class="pl-c"&gt;// 27&lt;/span&gt;
          &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
            &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared hot drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; hotDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
            &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber() &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload);
          &lt;span class="pl-k"&gt;return&lt;/span&gt; payload;
        }

      })
      .channel(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;output&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
      .get();
  }

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;resultFlow&lt;/span&gt;() {                                  &lt;span class="pl-c"&gt;// 28&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;output&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)                               &lt;span class="pl-c"&gt;// 29&lt;/span&gt;
      .transform(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;GenericTransformer&amp;lt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&amp;gt;&lt;/span&gt;() {            &lt;span class="pl-c"&gt;// 30&lt;/span&gt;

        &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt; &lt;span class="pl-en"&gt;transform&lt;/span&gt;(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt; &lt;span class="pl-v"&gt;orderItem&lt;/span&gt;) {
          &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;(orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber(),
            orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getDrinkType(),
            orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;isIced(),
            orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getShots());                                       &lt;span class="pl-c"&gt;// 31&lt;/span&gt;
        }

      })
      .aggregate(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;Consumer&amp;lt;&lt;span class="pl-stj"&gt;AggregatorSpec&lt;/span&gt;&amp;gt;&lt;/span&gt;() {                        &lt;span class="pl-c"&gt;// 32&lt;/span&gt;

        &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;accept&lt;/span&gt;(&lt;span class="pl-stj"&gt;AggregatorSpec&lt;/span&gt; &lt;span class="pl-v"&gt;aggregatorSpec&lt;/span&gt;) {
          aggregatorSpec&lt;span class="pl-k"&gt;.&lt;/span&gt;processor(cafeAggregator, &lt;span class="pl-c1"&gt;null&lt;/span&gt;);                &lt;span class="pl-c"&gt;// 33&lt;/span&gt;
        }

      }, &lt;span class="pl-c1"&gt;null&lt;/span&gt;)
      .handle(&lt;span class="pl-stj"&gt;CharacterStreamWritingMessageHandler&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;stdout())             &lt;span class="pl-c"&gt;// 34&lt;/span&gt;
    .get();
  }


  &lt;span class="pl-st"&gt;@Component&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;CafeAggregator&lt;/span&gt; {                                   &lt;span class="pl-c"&gt;// 35&lt;/span&gt;

    &lt;span class="pl-st"&gt;@Aggregator&lt;/span&gt;                                                          &lt;span class="pl-c"&gt;// 36&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt; &lt;span class="pl-en"&gt;output&lt;/span&gt;(&lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;drinks&lt;/span&gt;) {
      &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt;(drinks);
    }

    &lt;span class="pl-st"&gt;@CorrelationStrategy&lt;/span&gt;                                                 &lt;span class="pl-c"&gt;// 37&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Integer&lt;/span&gt; &lt;span class="pl-en"&gt;correlation&lt;/span&gt;(&lt;span class="pl-stj"&gt;Drink&lt;/span&gt; &lt;span class="pl-v"&gt;drink&lt;/span&gt;) {
      &lt;span class="pl-k"&gt;return&lt;/span&gt; drink&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber();
    }

  }

}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Examining the code line by line...&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line1"&gt;&lt;/a&gt;
1.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new meta-annotation from Spring Boot 1.2. Includes &lt;code&gt;@Configuration&lt;/code&gt; and
&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;. Since we are in a Spring Integration application and Spring Boot has auto-configuration
for it, the &lt;code&gt;@EnableIntegration&lt;/code&gt; is automatically applied, to initialize the Spring Integration infrastructure including an
environment for the Java DSL - &lt;code&gt;DslIntegrationConfigurationInitializer&lt;/code&gt;, which is picked up by the
&lt;code&gt;IntegrationConfigurationBeanFactoryPostProcessor&lt;/code&gt; from &lt;code&gt;/META-INF/spring.factories&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line2"&gt;&lt;/a&gt;
2.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;IntegrationComponentScan&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Spring Integration analogue of &lt;code&gt;@ComponentScan&lt;/code&gt; to scan components based on
interfaces, (the Spring Framework's &lt;code&gt;@ComponentScan&lt;/code&gt; only looks at classes). Spring Integration supports the discovery of interfaces
annotated with &lt;code&gt;@MessagingGateway&lt;/code&gt; (see #7 below).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line3"&gt;&lt;/a&gt;
3.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class="pl-k"&gt;=&lt;/span&gt;
             &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; method of our class is designed to start the Spring Boot application using the
configuration from this class and starts an &lt;code&gt;ApplicationContext&lt;/code&gt; via Spring Boot. In addition, it delegates command
line arguments to the Spring Boot. For example you can specify &lt;code&gt;--debug&lt;/code&gt; to see logs for the boot auto-configuration report.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line4"&gt;&lt;/a&gt;
4.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt; cafe &lt;span class="pl-k"&gt;=&lt;/span&gt; ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;getBean(&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we already have an &lt;code&gt;ApplicationContext&lt;/code&gt; we can start to interact with application. And &lt;code&gt;Cafe&lt;/code&gt;
is that entry point - in EIP terms a &lt;code&gt;gateway&lt;/code&gt;. Gateways are simply interfaces and the application does not interact
with the Messaging API; it simply deals with the domain (see #7 below).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line5"&gt;&lt;/a&gt;
5.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (&lt;span class="pl-st"&gt;int&lt;/span&gt; i &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;; i &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;; i&lt;span class="pl-k"&gt;++&lt;/span&gt;) {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To demonstrate the cafe "work" we intiate 100 orders with two drinks - one hot and one iced. And send the &lt;code&gt;Order&lt;/code&gt; to the &lt;code&gt;Cafe&lt;/code&gt; gateway.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line6"&gt;&lt;/a&gt;
6.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit 'Enter' to terminate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Typically Spring Integration application are asynchronous, hence to avoid early exit from the &lt;code&gt;main&lt;/code&gt; Thread we block the
&lt;code&gt;main&lt;/code&gt; method until some end-user interaction through the command line. Non daemon threads will keep the application
open but &lt;code&gt;System.read()&lt;/code&gt; provides us with a mechanism to close the application cleanly.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line7"&gt;&lt;/a&gt;
7.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;MessagingGateway&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The annotation to mark a business interface to indicate it is a &lt;code&gt;gateway&lt;/code&gt; between the
end-application and integration layer. It is an analogue of &lt;code&gt;&amp;lt;gateway /&amp;gt;&lt;/code&gt; component from Spring Integration XML
configuration. Spring Integration creates a &lt;code&gt;Proxy&lt;/code&gt; for this interface and populates it as a bean in the
application context. The purpose of this &lt;code&gt;Proxy&lt;/code&gt; is to wrap parameters in a &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; object and send it to the
&lt;code&gt;MessageChannel&lt;/code&gt; according to the provided options.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line8"&gt;&lt;/a&gt;
8.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@Gateway(requestChannel &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The method level annotation to distinct business logic by methods as well as by the target
integration flows. In this sample we use a &lt;code&gt;requestChannel&lt;/code&gt; reference of &lt;code&gt;orders.input&lt;/code&gt;, which is a &lt;code&gt;MessageChannel&lt;/code&gt;
bean name of our &lt;code&gt;IntegrationFlow&lt;/code&gt; input channel (see below #14).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line9"&gt;&lt;/a&gt;
9.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-st"&gt;void&lt;/span&gt; placeOrder(&lt;span class="pl-stj"&gt;Order&lt;/span&gt; order);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interface method is a central point to interact from end-application with the integration layer. This method has a
&lt;code&gt;void&lt;/code&gt; return type. It means that our integration flow is &lt;code&gt;one-way&lt;/code&gt; and we just send messages to the integration flow, but don't wait for a reply.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line10"&gt;&lt;/a&gt;
10.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; hotDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();
&lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; coldDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Two counters to gather the information how our cafe works with drinks.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line11"&gt;&lt;/a&gt;
11.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Autowired&lt;/span&gt;
&lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;CafeAggregator&lt;/span&gt; cafeAggregator;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The POJO for the &lt;code&gt;Aggregator&lt;/code&gt; logic (see #33 and #35 below). Since it is a Spring bean, we can simply inject it even to the current &lt;code&gt;@Configuration&lt;/code&gt; and use in any place below, e.g. from the &lt;code&gt;.aggregate()&lt;/code&gt; EIP-method.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line12"&gt;&lt;/a&gt;
12.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@Bean(name &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;DEFAULT_POLLER&lt;/span&gt;)
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt; poller() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; &lt;code&gt;poller&lt;/code&gt; bean. It is a analogue of &lt;code&gt;&amp;lt;poller default="true"&amp;gt;&lt;/code&gt; component from Spring Integration XML configuration. Required for endpoints where the &lt;code&gt;inputChannel&lt;/code&gt; is a &lt;code&gt;PollableChannel&lt;/code&gt;. In this case, it is necessary for the
two Cafe &lt;code&gt;queues&lt;/code&gt; - hot and iced (see below #18). Here we use the &lt;code&gt;Pollers&lt;/code&gt; factory from the DSL project and use its
method-chain fluent API to build the poller metadata. Note that &lt;code&gt;Pollers&lt;/code&gt; can be used directly from an &lt;code&gt;IntegrationFlow&lt;/code&gt; definition,
if a specific &lt;code&gt;poller&lt;/code&gt; (rather than the default poller) is needed for an endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line13"&gt;&lt;/a&gt;
13.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; orders() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlow&lt;/code&gt; bean definition. It is the central component of the Spring Integration Java DSL, although it does not play any role at runtime, just during the bean registration phase. All other code below registers Spring Integration components (&lt;code&gt;MessageChannel&lt;/code&gt;, &lt;code&gt;MessageHandler&lt;/code&gt;, &lt;code&gt;EventDrivenConsumer&lt;/code&gt;, &lt;code&gt;MessageProducer&lt;/code&gt;, &lt;code&gt;MessageSource&lt;/code&gt; etc.) in the &lt;code&gt;IntegrationFlow&lt;/code&gt; object, which is parsed by the &lt;code&gt;IntegrationFlowBeanPostProcessor&lt;/code&gt; to process those components and register them as beans in the application context as necessary (some elements, such as channels may already exist).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line14"&gt;&lt;/a&gt;
14.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlows&lt;/code&gt; is the main &lt;code&gt;factory&lt;/code&gt; class to start the &lt;code&gt;IntegrationFlow&lt;/code&gt;. It provides a number of overloaded &lt;code&gt;.from()&lt;/code&gt; methods to allow starting a flow from a &lt;code&gt;SourcePollingChannelAdapter&lt;/code&gt; for a &lt;code&gt;MessageSource&amp;lt;?&amp;gt;&lt;/code&gt; implementations, e.g. &lt;code&gt;JdbcPollingChannelAdapter&lt;/code&gt;; from a &lt;code&gt;MessageProducer&lt;/code&gt;, e.g. &lt;code&gt;WebSocketInboundChannelAdapter&lt;/code&gt;; or simply a &lt;code&gt;MessageChannel&lt;/code&gt;. All ".from()" options have several convenient variants to configure the appropriate component for the start of the &lt;code&gt;IntegrationFlow&lt;/code&gt;. Here we use just a channel name, which is converted to a &lt;code&gt;DirectChannel&lt;/code&gt; bean definition during the bean definition phase while parsing the &lt;code&gt;IntegrationFlow&lt;/code&gt;. In the Java 8 variant, we used here a &lt;code&gt;Lambda definition&lt;/code&gt; - and this &lt;code&gt;MessageChannel&lt;/code&gt; has been implicitly created with the bean name based on the &lt;code&gt;IntegrationFlow&lt;/code&gt; bean name.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line15"&gt;&lt;/a&gt;
15.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.split(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.items&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, (&lt;span class="pl-stj"&gt;Consumer&lt;/span&gt;) &lt;span class="pl-c1"&gt;null&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since our integration flow accepts messages through the &lt;code&gt;orders.input&lt;/code&gt; channel, we are ready to consume and process them. The first EIP-method in our scenario is &lt;code&gt;.split()&lt;/code&gt;. We know that the message &lt;code&gt;payload&lt;/code&gt; from &lt;code&gt;orders.input&lt;/code&gt; channel is an &lt;code&gt;Order&lt;/code&gt; domain object, so we can simply use here a Spring (SpEL) Expression to return &lt;code&gt;Collection&amp;lt;OrderItem&amp;gt;&lt;/code&gt;. So, this performs the &lt;code&gt;split&lt;/code&gt; EI pattern, and we send each collection entry as a separate message to the next channel. In the background, the &lt;code&gt;.split()&lt;/code&gt; method registers a &lt;code&gt;ExpressionEvaluatingSplitter&lt;/code&gt; &lt;code&gt;MessageHandler&lt;/code&gt; implementation and an &lt;code&gt;EventDrivenConsumer&lt;/code&gt; for that &lt;code&gt;MessageHandler&lt;/code&gt;, wiring in the &lt;code&gt;orders.input&lt;/code&gt; channel as the &lt;code&gt;inputChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument for the &lt;code&gt;.split()&lt;/code&gt; EIP-method is for an &lt;code&gt;endpointConfigurer&lt;/code&gt; to
customize options like &lt;code&gt;autoStartup&lt;/code&gt;, &lt;code&gt;requiresReply&lt;/code&gt;, &lt;code&gt;adviceChain&lt;/code&gt; etc. We use here &lt;code&gt;null&lt;/code&gt; to show that we rely
on the default options for the endpoint. Many of EIP-methods provide overloaded versions with and without
&lt;code&gt;endpointConfigurer&lt;/code&gt;. Currently &lt;code&gt;.split(String expression)&lt;/code&gt; EIP-method without the &lt;code&gt;endpointConfigurer&lt;/code&gt; argument is not available; this will be addressed in a future release.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line16"&gt;&lt;/a&gt;
16.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.channel(&lt;span class="pl-stj"&gt;MessageChannels&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;executor(&lt;span class="pl-stj"&gt;Executors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;newCachedThreadPool()))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.channel()&lt;/code&gt; EIP-method allows the specification of concrete &lt;code&gt;MessageChannel&lt;/code&gt;s between endpoints, as it is done via
&lt;code&gt;output-channel&lt;/code&gt;/&lt;code&gt;input-channel&lt;/code&gt; attributes pair with Spring Integration XML configuration. By default, endpoints in the
DSL integration flow definition are wired with &lt;code&gt;DirectChannel&lt;/code&gt;s, which get bean names based on the &lt;code&gt;IntegrationFlow&lt;/code&gt;
bean name and &lt;code&gt;index&lt;/code&gt; in the flow chain. In this case we select a
specific &lt;code&gt;MessageChannel&lt;/code&gt; implementation from the &lt;code&gt;Channels&lt;/code&gt; factory class; the selected
channel here is an &lt;code&gt;ExecutorChannel&lt;/code&gt;, to allow distribution of messages from the &lt;code&gt;splitter&lt;/code&gt; to separate &lt;code&gt;Thread&lt;/code&gt;s, to process
them in parallel in the downstream flow.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line17"&gt;&lt;/a&gt;
17.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.route(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;,&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next EIP-method in our scenario is &lt;code&gt;.route()&lt;/code&gt;, to send &lt;code&gt;hot/iced&lt;/code&gt; order items to different Cafe kitchens. We again use here a SpEL expression to get the &lt;code&gt;routingKey&lt;/code&gt; from the incoming message. In the Java 8 variant, we used a &lt;code&gt;method-reference&lt;/code&gt; Lambda expression, but for pre Java 8 style we must use SpEL or an inline interface implementation. Many anonymous classes in a flow can make the flow difficult to read so we prefer SpEL in most cases.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line18"&gt;&lt;/a&gt;
18.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;Consumer&amp;lt;&lt;span class="pl-st"&gt;RouterSpec&amp;lt;&lt;span class="pl-stj"&gt;ExpressionEvaluatingRouter&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;/span&gt;() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The second argument of &lt;code&gt;.route()&lt;/code&gt; EIP-method is a functional interface &lt;code&gt;Consumer&lt;/code&gt; to specify &lt;code&gt;ExpressionEvaluatingRouter&lt;/code&gt; options using a &lt;code&gt;RouterSpec&lt;/code&gt; Builder. Since we don't have any choice with pre Java 8, we just provide here an inline implementation for this interface.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line19"&gt;&lt;/a&gt;
19.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;spec&lt;span class="pl-k"&gt;.&lt;/span&gt;channelMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .channelMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;false&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hot&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the &lt;code&gt;Consumer&amp;lt;RouterSpec&amp;lt;ExpressionEvaluatingRouter&amp;gt;&amp;gt;#accept()&lt;/code&gt; implementation we can provide desired &lt;code&gt;AbstractMappingMessageRouter&lt;/code&gt; options. One of them is &lt;code&gt;channelMappings&lt;/code&gt;, when we specify the routing logic by the result of router expresion and the target &lt;code&gt;MessageChannel&lt;/code&gt; for the apropriate result. In this case &lt;code&gt;iced&lt;/code&gt; and &lt;code&gt;hot&lt;/code&gt; are &lt;code&gt;MessageChannel&lt;/code&gt; names for &lt;code&gt;IntegrationFlow&lt;/code&gt;s below.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line20"&gt;&lt;/a&gt;
20.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.get();&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This finalizes the flow.
Any &lt;code&gt;IntegrationFlows.from()&lt;/code&gt; method returns an &lt;code&gt;IntegrationFlowBuilder&lt;/code&gt; instance and this &lt;code&gt;get()&lt;/code&gt; method extracts an &lt;code&gt;IntegrationFlow&lt;/code&gt; object from the &lt;code&gt;IntegrationFlowBuilder&lt;/code&gt; configuration. Everything starting from the  &lt;code&gt;.from()&lt;/code&gt; and up to the method before the &lt;code&gt;.get()&lt;/code&gt; is an &lt;code&gt;IntegrationFlow&lt;/code&gt; definition. All defined components are stored in the &lt;code&gt;IntegrationFlow&lt;/code&gt; and processed by the &lt;code&gt;IntegrationFlowBeanPostProcessor&lt;/code&gt; during the bean creation phase.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line21"&gt;&lt;/a&gt;
21.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; icedFlow() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the second &lt;code&gt;IntegrationFlow&lt;/code&gt; bean definition - for &lt;code&gt;iced&lt;/code&gt; drinks. Here we demonstrate that several &lt;code&gt;IntegrationFlow&lt;/code&gt;s
can be wired together to create a single complex application. Note: it isn't recommended to inject one &lt;code&gt;IntegrationFlow&lt;/code&gt; to
another; it might cause unexpected behaviour. Since they provide Integration components for the bean registration and
&lt;code&gt;MessageChannel&lt;/code&gt;s one of them, the best way to wire and inject is via &lt;code&gt;MessageChannel&lt;/code&gt; or &lt;code&gt;@MessagingGateway&lt;/code&gt;
interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line22"&gt;&lt;/a&gt;
22.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-stj"&gt;MessageChannels&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;iced&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;10&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;iced&lt;/code&gt; &lt;code&gt;IntegrationFlow&lt;/code&gt; starts from a &lt;code&gt;QueueChannel&lt;/code&gt; that has a capacity of &lt;code&gt;10&lt;/code&gt; messages; it is registered as a bean with the name &lt;code&gt;iced&lt;/code&gt;.
As you remember we use this name as one of the route mappings (see above #19).&lt;/p&gt;

&lt;p&gt;In our sample, we use here a restricted
&lt;code&gt;QueueChannel&lt;/code&gt; to reflect the Cafe kitchen busy state from real life. And here is a place where we need that
&lt;code&gt;global poller&lt;/code&gt; for the next endpoint which is listening on this channel.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line23"&gt;&lt;/a&gt;
23.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.handle(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;GenericHandler&amp;lt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;&amp;gt;&lt;/span&gt;() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.handle()&lt;/code&gt; EIP-method of the &lt;code&gt;iced&lt;/code&gt; flow demonstrates the concrete Cafe kitchen work. Since we can't minimize
the code with something like Java 8 Lambda expression, we provide here an inline implementation for the &lt;code&gt;GenericHandler&lt;/code&gt;
functional interface with the expected &lt;code&gt;payload&lt;/code&gt; type as the generic argument. With the Java 8 example, we distribute this &lt;code&gt;.handle()&lt;/code&gt;
between several subscriber subflows for a &lt;code&gt;PublishSubscribeChannel&lt;/code&gt;. However in this case, the logic is all
implemented in the one method.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line24"&gt;&lt;/a&gt;
24.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;Uninterruptibles&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;sleepUninterruptibly(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;);
&lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
      &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared cold drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; coldDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
      &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber() &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; payload);
&lt;span class="pl-k"&gt;return&lt;/span&gt; payload;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The business logic implementation for the current &lt;code&gt;.handle()&lt;/code&gt; EIP-component. With
&lt;code&gt;Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);&lt;/code&gt; we just block the current &lt;code&gt;Thread&lt;/code&gt; for some timeout to demonstrate how
quickly the Cafe kitchen prepares a drink. After that we just report to &lt;code&gt;STDOUT&lt;/code&gt; that the drink is ready and
return the current &lt;code&gt;OrderItem&lt;/code&gt; from the &lt;code&gt;GenericHandler&lt;/code&gt; for the next endpoint in our &lt;code&gt;IntegrationFlow&lt;/code&gt;. In the
background, the DSL framework registers a &lt;code&gt;ServiceActivatingHandler&lt;/code&gt; for the &lt;code&gt;MethodInvokingMessageProcessor&lt;/code&gt; to invoke the
&lt;code&gt;GenericHandler#handle&lt;/code&gt; at runtime. In addition, the framework registers a &lt;code&gt;PollingConsumer&lt;/code&gt; endpoint for the
&lt;code&gt;QueueChannel&lt;/code&gt; above. This endpoint relies on the &lt;code&gt;default poller&lt;/code&gt; to poll messages from the queue. Of course, we
always can use a specific &lt;code&gt;poller&lt;/code&gt; for any concrete endpoint. In that case, we would have to provide a second
&lt;code&gt;endpointConfigurer&lt;/code&gt; argument to the &lt;code&gt;.handle()&lt;/code&gt; EIP-method.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line25"&gt;&lt;/a&gt;
25.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.channel(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;output&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since it is not the end of our Cafe scenario, we send the result of the current flow to the &lt;code&gt;output&lt;/code&gt; channel
using the convenient EIP-method &lt;code&gt;.channel()&lt;/code&gt; and the name of the &lt;code&gt;MessageChannel&lt;/code&gt; bean (see below #29). This is the logical
 end of the current iced drink subflow, so we use the &lt;code&gt;.get()&lt;/code&gt; method to return the &lt;code&gt;IntegrationFlow&lt;/code&gt;. Flows that end
 with a reply-producing handler that don't have a final &lt;code&gt;.channel()&lt;/code&gt; will return the reply to the message &lt;code&gt;replyChannel&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line26"&gt;&lt;/a&gt;
26.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; hotFlow() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlow&lt;/code&gt; definition for &lt;code&gt;hot&lt;/code&gt; drinks. It is similar to the previous &lt;code&gt;iced&lt;/code&gt; drinks flow, but
with specific &lt;code&gt;hot&lt;/code&gt; business logic. It starts from the &lt;code&gt;hot&lt;/code&gt; &lt;code&gt;QueueChannel&lt;/code&gt; which is mapped from the router above.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line27"&gt;&lt;/a&gt;
27.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;Uninterruptibles&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;sleepUninterruptibly(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;sleepUninterruptibly&lt;/code&gt; for &lt;code&gt;hot&lt;/code&gt; drinks. Right, we need more time to boil the water!&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line28"&gt;&lt;/a&gt;
28.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; resultFlow() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One more &lt;code&gt;IntegrationFlow&lt;/code&gt; bean definition to prepare the &lt;code&gt;Delivery&lt;/code&gt; for the Cafe client based on the &lt;code&gt;Drink&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line29"&gt;&lt;/a&gt;
29.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlows&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;from(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;output&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;resultFlow&lt;/code&gt; starts from the &lt;code&gt;DirectChannel&lt;/code&gt;, which is created during the bean definition phase with this
provided name. You should remember that we use the &lt;code&gt;output&lt;/code&gt; channel name from the Cafe kitchens flows in the last &lt;code&gt;.channel()&lt;/code&gt; in
those definitions.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line30"&gt;&lt;/a&gt;
30.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.transform(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;GenericTransformer&amp;lt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&amp;gt;&lt;/span&gt;() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.transform()&lt;/code&gt; EIP-method is for the appropriate pattern implementation and expects some object to convert one
payload to another. In our sample we use an inline implementation of the &lt;code&gt;GenericTransformer&lt;/code&gt; functional interface to
 convert &lt;code&gt;OrderItem&lt;/code&gt; to &lt;code&gt;Drink&lt;/code&gt; and we specify that using generic arguments. In the background, the DSL framework
 registers a &lt;code&gt;MessageTransformingHandler&lt;/code&gt; and an &lt;code&gt;EventDrivenConsumer&lt;/code&gt; endpoint with default options to consume messages
 from the &lt;code&gt;output&lt;/code&gt; &lt;code&gt;MessageChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line31"&gt;&lt;/a&gt;
31.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt; transform(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt; orderItem) {
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;(orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber(),
    orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getDrinkType(),
    orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;isIced(),
    orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getShots());
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The business-specific &lt;code&gt;GenericTransformer#transform()&lt;/code&gt; implementation to demonstrate how we benefit from Java
Generics to transform one &lt;code&gt;payload&lt;/code&gt; to another. Note: Spring Integration uses &lt;code&gt;ConversionService&lt;/code&gt; before
any method invocation and if you provide some specific &lt;code&gt;Converter&lt;/code&gt; implementation, some domain &lt;code&gt;payload&lt;/code&gt; can be
converted to another automatically, when the framework has an appropriate registered &lt;code&gt;Converter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line32"&gt;&lt;/a&gt;
32.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.aggregate(&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-st"&gt;Consumer&amp;lt;&lt;span class="pl-stj"&gt;AggregatorSpec&lt;/span&gt;&amp;gt;&lt;/span&gt;() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.aggregate()&lt;/code&gt; EIP-method provides options to configure an &lt;code&gt;AggregatingMessageHandler&lt;/code&gt; and its endpoint,
similar to what we can do with the &lt;code&gt;&amp;lt;aggregator&amp;gt;&lt;/code&gt; component when using Spring Integration XML configuration. Of course, with the Java DSL
we have more power to configure the aggregator in place, without any other extra beans. However we demonstrate
here an aggregator configuration with annotations (see below #35).
From the Cafe business logic perspective we compose the &lt;code&gt;Delivery&lt;/code&gt; for the initial &lt;code&gt;Order&lt;/code&gt;, since we &lt;code&gt;.split()&lt;/code&gt; the original order
to the &lt;code&gt;OrderItem&lt;/code&gt;s near the beginning.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line33"&gt;&lt;/a&gt;
33.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; accept(&lt;span class="pl-stj"&gt;AggregatorSpec&lt;/span&gt; aggregatorSpec) {
     aggregatorSpec&lt;span class="pl-k"&gt;.&lt;/span&gt;processor(cafeAggregator, &lt;span class="pl-c1"&gt;null&lt;/span&gt;);
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An inline implementation of the &lt;code&gt;Consumer&lt;/code&gt; for the &lt;code&gt;AggregatorSpec&lt;/code&gt;. Using the &lt;code&gt;aggregatorSpec&lt;/code&gt; Builder we can provide
desired options for the &lt;code&gt;aggregator&lt;/code&gt; component, which will be registered as an &lt;code&gt;AggregatingMessageHandler&lt;/code&gt; bean. Here we
just provide the &lt;code&gt;processor&lt;/code&gt; as a reference to the autowired (see #11 above) &lt;code&gt;CafeAggregator&lt;/code&gt; component (see #35 below).
The second argument of the &lt;code&gt;.processor()&lt;/code&gt; option is &lt;code&gt;methodName&lt;/code&gt;. Since we are relying on the aggregator
annotation configuration for the POJO, we don't need to provide the method here and the framework will determine the correct POJO methods
in the background.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line34"&gt;&lt;/a&gt;
34.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.handle(&lt;span class="pl-stj"&gt;CharacterStreamWritingMessageHandler&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;stdout())&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is the end of our flow - the &lt;code&gt;Delivery&lt;/code&gt; is delivered to the client! We just print here the message &lt;code&gt;payload&lt;/code&gt;
to STDOUT using out-of-the-box &lt;code&gt;CharacterStreamWritingMessageHandler&lt;/code&gt; from Spring Integration Core. This is a
case to show how existing components from Spring Integration Core (and its modules) can be used from the Java DSL.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line35"&gt;&lt;/a&gt;
35.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Component&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;CafeAggregator&lt;/span&gt; {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The bean to specify the business logic for the &lt;code&gt;aggregator&lt;/code&gt; above. This bean is picked up by the &lt;code&gt;@ComponentScan&lt;/code&gt;,
which is a part of the &lt;code&gt;@SpringBootApplication&lt;/code&gt; meta-annotation (see above #1). So, this component becomes a bean
and we can automatically wire (&lt;code&gt;@Autowired&lt;/code&gt;) it to other components in the application context (see #11 above).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line36"&gt;&lt;/a&gt;
36.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Aggregator&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt; output(&lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&amp;gt;&lt;/span&gt; drinks) {
   &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt;(drinks);
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The POJO-specific &lt;code&gt;MessageGroupProcessor&lt;/code&gt; to build the output &lt;code&gt;payload&lt;/code&gt; based on the payloads from aggregated
messages. Since we mark this method with the &lt;code&gt;@Aggregator&lt;/code&gt; annotation, the target &lt;code&gt;AggregatingMessageHandler&lt;/code&gt; can extract
this method for the &lt;code&gt;MethodInvokingMessageGroupProcessor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line37"&gt;&lt;/a&gt;
37.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;CorrelationStrategy&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Integer&lt;/span&gt; correlation(&lt;span class="pl-stj"&gt;Drink&lt;/span&gt; drink) {
   &lt;span class="pl-k"&gt;return&lt;/span&gt; drink&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber();
}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The POJO-specific &lt;code&gt;CorrelationStrategy&lt;/code&gt; to extract the custom &lt;code&gt;correlationKey&lt;/code&gt; from each inbound aggregator message.
Since we mark this method with &lt;code&gt;@CorrelationStrategy&lt;/code&gt; annotation the target &lt;code&gt;AggregatingMessageHandler&lt;/code&gt; can extract
this method for the &lt;code&gt;MethodInvokingCorrelationStrategy&lt;/code&gt;.
There is a similar self-explained &lt;code&gt;@ReleaseStrategy&lt;/code&gt; annotation, but we rely in our Cafe sample just on the default
&lt;code&gt;SequenceSizeReleaseStrategy&lt;/code&gt;, which is based on the &lt;code&gt;sequenceDetails&lt;/code&gt; message header populated by the &lt;code&gt;splitter&lt;/code&gt;
from the beginning of our integration flow.&lt;/p&gt;

&lt;p&gt;Well, we have finished describing the Cafe Demo sample based on the Spring Integration Java DSL when Java Lambda
support is not available.
Compare it with &lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/applications/cafe/cafe-si"&gt;XML sample&lt;/a&gt;
and also see &lt;a href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial"&gt;Lambda support tutorial&lt;/a&gt;
to get more information regarding Spring Integration.&lt;/p&gt;

&lt;p&gt;As you can see, using the DSL without lambdas is a little more verbose because you need to provide boilerplate code
for inline anonymous implementations of functional interfaces. However, we believe it is important to support the use
of the DSL for users who can't yet move to Java 8. Many of the DSL benefits (fluent API, compile-time validation etc)
are available for all users.&lt;/p&gt;

&lt;p&gt;The use of lambdas continues the Spring Framework tradition of reducing or eliminating boilerplate code, so we encourage
users to try Java 8 and lambdas and to encourage their organizations to consider allowing the use of Java 8 for
Spring Integration applications.&lt;/p&gt;

&lt;p&gt;In addition see the &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/wiki/Spring-Integration-Java-DSL-Reference"&gt;Reference Manual&lt;/a&gt;
for more information.&lt;/p&gt;

&lt;p&gt;As always, we look forward to your comments and feedback (&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt;
(&lt;code&gt;spring-integration&lt;/code&gt; tag), &lt;a href="https://jira.spring.io/browse/INTEXT"&gt;Spring JIRA&lt;/a&gt;,
&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/issues"&gt;GitHub&lt;/a&gt;) and we very much welcome
&lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thank you for your time and patience to read this!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Roo 1.3.1 RC1 available with important bug fixes</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/26/spring-roo-1-3-1-rc1-available-with-important-bug-fixes" />
    <category term="releases" label="Releases" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-26:1863</id>
    <updated>2014-11-26T10:21:00Z</updated>
    <content type="html">&lt;p&gt;Spring Roo 1.3.1 RC1 Release Candidate is available.&lt;/p&gt;

&lt;p&gt;Spring Roo jar files have been published to Maven Central. As always, the release is available in the Spring IO repository. &lt;/p&gt;

&lt;p&gt;The candidate release fixes serious issues: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt; running reverse engineering. &lt;/li&gt;
  &lt;li&gt; installing third-party addons. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is highly recommended that all Spring Roo users upgrade to this version. &lt;/p&gt;

&lt;p&gt;For full details on the changes made in the release, please refer to the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10340&amp;amp;version=14836"&gt;Release Note in Jira&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more project specific information please see the &lt;a href="http://projects.spring.io/spring-roo/"&gt;Project Page&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-roo"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Thanks to the awesome users who came up with useful bug reports and suggestions. This is a candidate release, please try out the updates and provide feedback. As always, you'll also find Roo on Twitter - either follow @SpringRoo or just include #SpringRoo in your tweets. Stay tuned!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Java DSL: Line by line tutorial</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-11-25:1862</id>
    <updated>2014-11-25T13:10:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community!&lt;/p&gt;

&lt;p&gt;Just after the &lt;a href="https://spring.io/blog/2014/11/24/spring-integration-java-dsl-1-0-ga-released"&gt;Spring Integration Java DSL 1.0 GA&lt;/a&gt; release announcement I want to introduce the Spring Integration Java DSL to you as a line by line tutorial based on the
classic
&lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/dsl/cafe-dsl"&gt;Cafe Demo&lt;/a&gt; integration sample.
We describe here &lt;a href="http://projects.spring.io/spring-boot/"&gt;Spring Boot&lt;/a&gt; support,
Spring Framework &lt;a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#beans-java"&gt;Java and Annotation&lt;/a&gt;
configuration,
the &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/blob/master/src/main/java/org/springframework/integration/dsl/IntegrationFlow.java"&gt;&lt;code&gt;IntegrationFlow&lt;/code&gt;&lt;/a&gt;
feature and pay tribute to Java 8 &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda&lt;/a&gt;
support which was an inspiration for the DSL style. Of course, it is all backed by the
&lt;a href="http://projects.spring.io/spring-integration/"&gt;Spring Integration Core&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;For those, who are not interested in Java 8 yet, we provide similar tutorial without Lambdas: &lt;a href="http://spring.io/blog/2014/12/01/spring-integration-java-dsl-pre-java-8-line-by-line-tutorial"&gt;Spring Integration Java DSL (pre Java 8): Line by line tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, before we launch into the description of the Cafe demonstration app here's a shorter example just to get started...&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Configuration&lt;/span&gt;
@&lt;span class="pl-stj"&gt;EnableAutoConfiguration&lt;/span&gt;
@&lt;span class="pl-stj"&gt;IntegrationComponentScan&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Start&lt;/span&gt; {

    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;(&lt;span class="pl-st"&gt;String&lt;/span&gt;[] &lt;span class="pl-v"&gt;args&lt;/span&gt;) &lt;span class="pl-s"&gt;throws&lt;/span&gt; &lt;span class="pl-stj"&gt;InterruptedException&lt;/span&gt; {
        &lt;span class="pl-stj"&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Start&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);

        &lt;span class="pl-st"&gt;List&amp;lt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; strings &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;Arrays&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;asList(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;bar&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
        &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;getBean(&lt;span class="pl-stj"&gt;Upcase&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)&lt;span class="pl-k"&gt;.&lt;/span&gt;upcase(strings));

        ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;close();
    }

    &lt;span class="pl-st"&gt;@MessagingGateway&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;Upcase&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@Gateway&lt;/span&gt;(&lt;span class="pl-c1"&gt;requestChannel&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;upcase.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-st"&gt;Collection&amp;lt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;upcase&lt;/span&gt;(&lt;span class="pl-st"&gt;Collection&amp;lt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-v"&gt;strings&lt;/span&gt;);

    }

    &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;upcase&lt;/span&gt;() {
        &lt;span class="pl-k"&gt;return&lt;/span&gt; f &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; f
                .split()                                         &lt;span class="pl-c"&gt;// 1&lt;/span&gt;
                &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;String&lt;/span&gt;, &lt;span class="pl-stj"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(&lt;span class="pl-stj"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;toUpperCase)  &lt;span class="pl-c"&gt;// 2&lt;/span&gt;
                .aggregate();                                    &lt;span class="pl-c"&gt;// 3&lt;/span&gt;
    }

}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will leave the description of the infrastructure (annotations etc) to the main cafe flow description. Here, we want you
to concentrate on the last &lt;code&gt;@Bean&lt;/code&gt;, the &lt;code&gt;IntegrationFlow&lt;/code&gt; as well as the gateway method which sends messages to that flow.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;main&lt;/code&gt; method we send a collection of strings to the gateway and print the results to STDOUT. The flow first splits the collection into individual
&lt;code&gt;String&lt;/code&gt;s (1); each string is then transformed to upper case (2) and finally we re-aggregate them back into a collection (3)
Since that's the end of the flow, the framework returns the result of the aggregation back to the gateway and the new
payload becomes the return value from the gateway method.&lt;/p&gt;

&lt;p&gt;The equivalent XML configuration might be...&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;gateway&lt;/span&gt; service &lt;span class="pl-e"&gt;interface&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.Upcase&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;default-request-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;upcase.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;splitter&lt;/span&gt; &lt;span class="pl-e"&gt;input-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;upcase.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;output-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;transform&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;/&amp;gt;

&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;transformer&lt;/span&gt; &lt;span class="pl-e"&gt;expression&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.toUpperCase()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-e"&gt;input-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;transform&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-e"&gt;output-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;aggregate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; /&amp;gt;

&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;aggregator&lt;/span&gt; &lt;span class="pl-e"&gt;input-channle&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;aggregate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; /&amp;gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or...&lt;/p&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;gateway&lt;/span&gt; service &lt;span class="pl-e"&gt;interface&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;foo.Upcase&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-e"&gt;default-request-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;upcase.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;chain&lt;/span&gt; &lt;span class="pl-e"&gt;input-channel&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;upcase.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;splitter&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;transformer&lt;/span&gt; &lt;span class="pl-e"&gt;expression&lt;/span&gt;=&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;payload.toUpperCase()&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;aggregator&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span class="pl-ent"&gt;int&lt;/span&gt;&lt;span class="pl-ent"&gt;:&lt;/span&gt;&lt;span class="pl-ent"&gt;chain&lt;/span&gt;&amp;gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a id="user-content-cafe-demo" class="anchor" href="#cafe-demo" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Cafe Demo&lt;/h2&gt;

&lt;p&gt;The purpose of the &lt;code&gt;Cafe Demo&lt;/code&gt; application is to demonstrate how Enterprise Integration Patterns
(EIP) can be used to reflect the &lt;code&gt;order-delivery&lt;/code&gt;
scenario in a real life cafe. With this application, we handle several drink orders - hot and iced.
After running the application we can see in the standard output (&lt;code&gt;System.out.println&lt;/code&gt;) how cold drinks are prepared quicker
than hot. However the delivery for the whole order is postponed until the hot drink is ready.&lt;/p&gt;

&lt;p&gt;To reflect the domain model we have several classes: &lt;code&gt;Order&lt;/code&gt;, &lt;code&gt;OrderItem&lt;/code&gt;, &lt;code&gt;Drink&lt;/code&gt; and &lt;code&gt;Delivery&lt;/code&gt;.
They all are mentioned in the integration scenario, but we won't analyze them here, because they are simple enough.&lt;/p&gt;

&lt;p&gt;The source code for our application is placed only in a single class; significant lines are annotated with a number
corresponding to the comments, which follow:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;SpringBootApplication&lt;/span&gt;               &lt;span class="pl-c"&gt;// 1&lt;/span&gt;
@&lt;span class="pl-stj"&gt;IntegrationComponentScan&lt;/span&gt;            &lt;span class="pl-c"&gt;// 2&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt; {

  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;(&lt;span class="pl-st"&gt;String&lt;/span&gt;[] &lt;span class="pl-v"&gt;args&lt;/span&gt;) &lt;span class="pl-s"&gt;throws&lt;/span&gt; &lt;span class="pl-stj"&gt;Exception&lt;/span&gt; {
    &lt;span class="pl-stj"&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class="pl-k"&gt;=&lt;/span&gt;
                  &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);&lt;span class="pl-c"&gt;// 3&lt;/span&gt;

    &lt;span class="pl-stj"&gt;Cafe&lt;/span&gt; cafe &lt;span class="pl-k"&gt;=&lt;/span&gt; ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;getBean(&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);                         &lt;span class="pl-c"&gt;// 4&lt;/span&gt;
    &lt;span class="pl-k"&gt;for&lt;/span&gt; (&lt;span class="pl-st"&gt;int&lt;/span&gt; i &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;; i &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;; i&lt;span class="pl-k"&gt;++&lt;/span&gt;) {                             &lt;span class="pl-c"&gt;// 5&lt;/span&gt;
       &lt;span class="pl-stj"&gt;Order&lt;/span&gt; order &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Order&lt;/span&gt;(i);
       order&lt;span class="pl-k"&gt;.&lt;/span&gt;addItem(&lt;span class="pl-stj"&gt;DrinkType&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;LATTE&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;false&lt;/span&gt;); &lt;span class="pl-c"&gt;//hot&lt;/span&gt;
       order&lt;span class="pl-k"&gt;.&lt;/span&gt;addItem(&lt;span class="pl-stj"&gt;DrinkType&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;MOCHA&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;);  &lt;span class="pl-c"&gt;//iced&lt;/span&gt;
       cafe&lt;span class="pl-k"&gt;.&lt;/span&gt;placeOrder(order);
    }

    &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit 'Enter' to terminate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);              &lt;span class="pl-c"&gt;// 6&lt;/span&gt;
    &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;in&lt;span class="pl-k"&gt;.&lt;/span&gt;read();
    ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;close();
  }

  &lt;span class="pl-st"&gt;@MessagingGateway&lt;/span&gt;                                              &lt;span class="pl-c"&gt;// 7&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;interface&lt;/span&gt; &lt;span class="pl-en"&gt;Cafe&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Gateway&lt;/span&gt;(&lt;span class="pl-c1"&gt;requestChannel&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)                    &lt;span class="pl-c"&gt;// 8&lt;/span&gt;
    &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;placeOrder&lt;/span&gt;(&lt;span class="pl-stj"&gt;Order&lt;/span&gt; &lt;span class="pl-v"&gt;order&lt;/span&gt;);                                &lt;span class="pl-c"&gt;// 9&lt;/span&gt;

  }

  &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; hotDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();

  &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; coldDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();  &lt;span class="pl-c"&gt;// 10&lt;/span&gt;

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;(&lt;span class="pl-c1"&gt;name&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;DEFAULT_POLLER&lt;/span&gt;)
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt; &lt;span class="pl-en"&gt;poller&lt;/span&gt;() {                               &lt;span class="pl-c"&gt;// 11&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-stj"&gt;Pollers&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;fixedDelay(&lt;span class="pl-c1"&gt;1000&lt;/span&gt;)&lt;span class="pl-k"&gt;.&lt;/span&gt;get();
  }

  &lt;span class="pl-st"&gt;@Bean&lt;/span&gt;
  &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; &lt;span class="pl-en"&gt;orders&lt;/span&gt;() {                             &lt;span class="pl-c"&gt;// 12&lt;/span&gt;
    &lt;span class="pl-k"&gt;return&lt;/span&gt; f &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; f                                               &lt;span class="pl-c"&gt;// 13&lt;/span&gt;
      .split(&lt;span class="pl-stj"&gt;Order&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, &lt;span class="pl-stj"&gt;Order&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;getItems)                      &lt;span class="pl-c"&gt;// 14&lt;/span&gt;
      .channel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;span class="pl-k"&gt;.&lt;/span&gt;executor(&lt;span class="pl-stj"&gt;Executors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;newCachedThreadPool()))&lt;span class="pl-c"&gt;// 15&lt;/span&gt;
      &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Boolean&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;route(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;isIced, mapping &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; mapping &lt;span class="pl-c"&gt;// 16&lt;/span&gt;
        .subFlowMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, sf &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sf                        &lt;span class="pl-c"&gt;// 17&lt;/span&gt;
          .channel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-c1"&gt;10&lt;/span&gt;))                            &lt;span class="pl-c"&gt;// 18&lt;/span&gt;
          .publishSubscribeChannel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c                       &lt;span class="pl-c"&gt;// 19&lt;/span&gt;
            .subscribe(s &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;                                     &lt;span class="pl-c"&gt;// 20&lt;/span&gt;
              s&lt;span class="pl-k"&gt;.&lt;/span&gt;handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sleepUninterruptibly(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;)))&lt;span class="pl-c"&gt;// 21&lt;/span&gt;
            .subscribe(sub &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sub                               &lt;span class="pl-c"&gt;// 22&lt;/span&gt;
              &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(item &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared cold drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;coldDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item)                                 &lt;span class="pl-c"&gt;// 23&lt;/span&gt;
              .handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(m&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())))))&lt;span class="pl-c"&gt;// 24&lt;/span&gt;
        .subFlowMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;false&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, sf &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sf                        &lt;span class="pl-c"&gt;// 25&lt;/span&gt;
          .channel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-c1"&gt;10&lt;/span&gt;))
          .publishSubscribeChannel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c
            .subscribe(s &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
              s&lt;span class="pl-k"&gt;.&lt;/span&gt;handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sleepUninterruptibly(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;)))&lt;span class="pl-c"&gt;// 26&lt;/span&gt;
            .subscribe(sub &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sub
              &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(item &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared hot drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;hotDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item)
              .handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(m&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload()))))))
      &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(orderItem &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;(orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getDrinkType(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;isIced(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getShots()))                                &lt;span class="pl-c"&gt;// 27&lt;/span&gt;
      .aggregate(aggregator &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; aggregator                       &lt;span class="pl-c"&gt;// 28&lt;/span&gt;
        .outputProcessor(group &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;                               &lt;span class="pl-c"&gt;// 29&lt;/span&gt;
          &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt;(group&lt;span class="pl-k"&gt;.&lt;/span&gt;getMessages()
            .stream()
            .map(message &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;) message&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())
            .collect(&lt;span class="pl-stj"&gt;Collectors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;toList())))                     &lt;span class="pl-c"&gt;// 30&lt;/span&gt;
        .correlationStrategy(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
          ((&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;) m&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber()), &lt;span class="pl-c1"&gt;null&lt;/span&gt;)     &lt;span class="pl-c"&gt;// 31&lt;/span&gt;
      .handle(&lt;span class="pl-stj"&gt;CharacterStreamWritingMessageHandler&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;stdout());   &lt;span class="pl-c"&gt;// 32&lt;/span&gt;
  }

}&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Examining the code line by line...&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line1"&gt;&lt;/a&gt;
1. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;SpringBootApplication&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This new meta-annotation from Spring Boot 1.2. Includes &lt;code&gt;@Configuration&lt;/code&gt; and
&lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;. Since we are in a Spring Integration application and Spring Boot has auto-configuration
for it, the &lt;code&gt;@EnableIntegration&lt;/code&gt; is automatically applied, to initialize the Spring Integration infrastructure including an
environment for the Java DSL - &lt;code&gt;DslIntegrationConfigurationInitializer&lt;/code&gt;, which is picked up by the
&lt;code&gt;IntegrationConfigurationBeanFactoryPostProcessor&lt;/code&gt; from &lt;code&gt;/META-INF/spring.factories&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line2"&gt;&lt;/a&gt;
2. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;IntegrationComponentScan&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Spring Integration analogue of &lt;code&gt;@ComponentScan&lt;/code&gt; to scan components based on
interfaces, (the Spring Framework's &lt;code&gt;@ComponentScan&lt;/code&gt; only looks at classes). Spring Integration supports the discovery of interfaces
annotated with &lt;code&gt;@MessagingGateway&lt;/code&gt; (see #7 below).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line3"&gt;&lt;/a&gt;
3. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;ConfigurableApplicationContext&lt;/span&gt; ctx &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; method of our class is designed to start the Spring Boot application using the
configuration from this class and starts an &lt;code&gt;ApplicationContext&lt;/code&gt; via Spring Boot. In addition, it delegates command
line arguments to the Spring Boot. For example you can specify &lt;code&gt;--debug&lt;/code&gt; to see logs for the boot auto-configuration report.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line4"&gt;&lt;/a&gt;
4. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt; cafe &lt;span class="pl-k"&gt;=&lt;/span&gt; ctx&lt;span class="pl-k"&gt;.&lt;/span&gt;getBean(&lt;span class="pl-stj"&gt;Cafe&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we already have an &lt;code&gt;ApplicationContext&lt;/code&gt; we can start to interact with application. And &lt;code&gt;Cafe&lt;/code&gt;
is that entry point - in EIP terms a &lt;code&gt;gateway&lt;/code&gt;. Gateways are simply interfaces and the application does not interact
with the Messaging API; it simply deals with the domain (see #7 below).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line5"&gt;&lt;/a&gt;
5.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; (&lt;span class="pl-st"&gt;int&lt;/span&gt; i &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;; i &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;100&lt;/span&gt;; i&lt;span class="pl-k"&gt;++&lt;/span&gt;) {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To demonstrate the cafe "work" we intiate 100 orders with two drinks - one hot and one iced. And send the &lt;code&gt;Order&lt;/code&gt; to the &lt;code&gt;Cafe&lt;/code&gt; gateway.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line6"&gt;&lt;/a&gt;
6.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hit 'Enter' to terminate&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Typically Spring Integration application are asynchronous, hence to avoid early exit from the &lt;code&gt;main&lt;/code&gt; Thread we block the
&lt;code&gt;main&lt;/code&gt; method until some end-user interaction through the command line. Non daemon threads will keep the application
open but &lt;code&gt;System.read()&lt;/code&gt; provides us with a mechanism to close the application cleanly.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line7"&gt;&lt;/a&gt;
7. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;MessagingGateway&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The annotation to mark a business interface to indicate it is a &lt;code&gt;gateway&lt;/code&gt; between the
end-application and integration layer. It is an analogue of &lt;code&gt;&amp;lt;gateway /&amp;gt;&lt;/code&gt; component from Spring Integration XML
configuration. Spring Integration creates a &lt;code&gt;Proxy&lt;/code&gt; for this interface and populates it as a bean in the
application context. The purpose of this &lt;code&gt;Proxy&lt;/code&gt; is to wrap parameters in a &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; object and send it to the
&lt;code&gt;MessageChannel&lt;/code&gt; according to the provided options.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line8"&gt;&lt;/a&gt;
8. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@Gateway(requestChannel &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;orders.input&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The method level annotation to distinct business logic by methods as well as by the target
integration flows. In this sample we use a &lt;code&gt;requestChannel&lt;/code&gt; reference of &lt;code&gt;orders.input&lt;/code&gt;, which is a &lt;code&gt;MessageChannel&lt;/code&gt;
bean name of our &lt;code&gt;IntegrationFlow&lt;/code&gt; input channel (see below #13).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line9"&gt;&lt;/a&gt;
9. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-st"&gt;void&lt;/span&gt; placeOrder(&lt;span class="pl-stj"&gt;Order&lt;/span&gt; order);&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interface method is a central point to interact from end-application with the integration layer. This method has a
&lt;code&gt;void&lt;/code&gt; return type. It means that our integration flow is &lt;code&gt;one-way&lt;/code&gt; and we just send messages to the integration flow, but don't wait for a reply.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line10"&gt;&lt;/a&gt;
10. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; hotDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();
&lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt; coldDrinkCounter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;AtomicInteger&lt;/span&gt;();&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Two counters to gather the information how our cafe works with drinks.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line11"&gt;&lt;/a&gt;
11.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@Bean(name &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;DEFAULT_POLLER&lt;/span&gt;)
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;PollerMetadata&lt;/span&gt; poller() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;default&lt;/code&gt; &lt;code&gt;poller&lt;/code&gt; bean. It is a analogue of &lt;code&gt;&amp;lt;poller default="true"&amp;gt;&lt;/code&gt; component from Spring Integration XML configuration. Required for endpoints where the &lt;code&gt;inputChannel&lt;/code&gt; is a &lt;code&gt;PollableChannel&lt;/code&gt;. In this case, it is necessary for the
two Cafe &lt;code&gt;queues&lt;/code&gt; - hot and iced (see below #18). Here we use the &lt;code&gt;Pollers&lt;/code&gt; factory from the DSL project and use its
method-chain fluent API to build the poller metadata. Note that &lt;code&gt;Pollers&lt;/code&gt; can be used directly from an &lt;code&gt;IntegrationFlow&lt;/code&gt; definition,
if a specific &lt;code&gt;poller&lt;/code&gt; (rather than the default poller) is needed for an endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line12"&gt;&lt;/a&gt;
12. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;@&lt;span class="pl-stj"&gt;Bean&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;IntegrationFlow&lt;/span&gt; orders() {&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlow&lt;/code&gt; bean definition. It is the central component of the Spring Integration Java DSL, although it does
 not play any role at runtime, just during the bean registration phase. All other code below registers Spring
 Integration components (&lt;code&gt;MessageChannel&lt;/code&gt;, &lt;code&gt;MessageHandler&lt;/code&gt;, &lt;code&gt;EventDrivenConsumer&lt;/code&gt;, &lt;code&gt;MessageProducer&lt;/code&gt;,
 &lt;code&gt;MessageSource&lt;/code&gt; etc.) in the &lt;code&gt;IntegrationFlow&lt;/code&gt; object, which is parsed by the &lt;code&gt;IntegrationFlowBeanPostProcessor&lt;/code&gt; to
 process those components and register them as beans in the application context as necessary (some elements, such as
 channels may already exist).&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line13"&gt;&lt;/a&gt;
13. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;return&lt;/span&gt; f &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; f&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;IntegrationFlow&lt;/code&gt; is a &lt;code&gt;Consumer&lt;/code&gt; functional interface, so we can minimize our code and concentrate just
only on the integration scenario requirements. Its &lt;code&gt;Lambda&lt;/code&gt; accepts &lt;code&gt;IntegrationFlowDefinition&lt;/code&gt; as an argument. This
class offers a comprehensive set of methods which can be composed to the &lt;code&gt;chain&lt;/code&gt;. We call these &lt;code&gt;EIP-methods&lt;/code&gt;,
because they provide implementations for EI patterns and populate components from Spring Integration Core. During the bean
registration phase, the &lt;code&gt;IntegrationFlowBeanPostProcessor&lt;/code&gt; converts this inline (Lambda) &lt;code&gt;IntegrationFlow&lt;/code&gt; to a
&lt;code&gt;StandardIntegrationFlow&lt;/code&gt; and processes its components. The same we can achieve using &lt;code&gt;IntegrationFlows&lt;/code&gt; factory
(e.g. &lt;code&gt;IntegrationFlow.from("channelX"). ... .get()&lt;/code&gt;), but
 we find the Lambda definition more elegant. An &lt;code&gt;IntegrationFlow&lt;/code&gt; definition using a Lambda populates &lt;code&gt;DirectChannel&lt;/code&gt;
 as an &lt;code&gt;inputChannel&lt;/code&gt; of the flow and it is registered in the application context as a bean with the name
 &lt;code&gt;orders.input&lt;/code&gt; in this our sample (&lt;code&gt;flow bean name + ".input"&lt;/code&gt;). That's why we use that name for the &lt;code&gt;Cafe&lt;/code&gt; gateway.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line14"&gt;&lt;/a&gt;
14.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.split(&lt;span class="pl-stj"&gt;Order&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, &lt;span class="pl-stj"&gt;Order&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;getItems)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since our integration flow accepts message through the &lt;code&gt;orders.input&lt;/code&gt; channel, we are ready to consume and process
 them. The first EIP-method in our scenario is &lt;code&gt;.split()&lt;/code&gt;. We know that the message &lt;code&gt;payload&lt;/code&gt; from &lt;code&gt;orders.input&lt;/code&gt;
 channel is an &lt;code&gt;Order&lt;/code&gt; domain object, so we can simply use its type here and use the Java 8 &lt;code&gt;method-reference&lt;/code&gt;
 feature. The first parameter is a type of message &lt;code&gt;payload&lt;/code&gt; we expect, and the second is a method reference to the
 &lt;code&gt;getItems()&lt;/code&gt; method, which returns &lt;code&gt;Collection&amp;lt;OrderItem&amp;gt;&lt;/code&gt;. So, this performs the &lt;code&gt;split&lt;/code&gt; EI pattern, when we send each
 collection entry as a separate message to the next channel. In the background, the &lt;code&gt;.split()&lt;/code&gt; method registers a
 &lt;code&gt;MethodInvokingSplitter&lt;/code&gt; &lt;code&gt;MessageHandler&lt;/code&gt; implementation and the &lt;code&gt;EventDrivenConsumer&lt;/code&gt; for that &lt;code&gt;MessageHandler&lt;/code&gt;, and
  wiring in the &lt;code&gt;orders.input&lt;/code&gt; channel as the &lt;code&gt;inputChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line15"&gt;&lt;/a&gt;
15. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.channel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;span class="pl-k"&gt;.&lt;/span&gt;executor(&lt;span class="pl-stj"&gt;Executors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;newCachedThreadPool()))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.channel()&lt;/code&gt; EIP-method allows the specification of concrete &lt;code&gt;MessageChannel&lt;/code&gt;s between endpoints, as it is done via
&lt;code&gt;output-channel&lt;/code&gt;/&lt;code&gt;input-channel&lt;/code&gt; attributes pair with Spring Integration XML configuration. By default, endpoints in the
DSL integration flow definition are wired with &lt;code&gt;DirectChannel&lt;/code&gt;s, which get the bean names based on the &lt;code&gt;IntegrationFlow&lt;/code&gt;
bean name and &lt;code&gt;index&lt;/code&gt; in the flow chain. In this case we use another &lt;code&gt;Lambda&lt;/code&gt; expression, which selects a
specific &lt;code&gt;MessageChannel&lt;/code&gt; implementation from its &lt;code&gt;Channels&lt;/code&gt; factory and configures it with the fluent API. The current
channel here is an &lt;code&gt;ExecutorChannel&lt;/code&gt;, to allow to distribute messages from the &lt;code&gt;splitter&lt;/code&gt; to separate &lt;code&gt;Thread&lt;/code&gt;s, to process
them in parallel in the downstream flow.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line16"&gt;&lt;/a&gt;
16. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Boolean&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;route(&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;&lt;span class="pl-k"&gt;::&lt;/span&gt;isIced, mapping &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; mapping&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next EIP-method in our scenario is &lt;code&gt;.route()&lt;/code&gt;, to send &lt;code&gt;hot/iced&lt;/code&gt; order items to different Cafe kitchens. We again
use here a method reference (&lt;code&gt;isIced()&lt;/code&gt;) to get the &lt;code&gt;routingKey&lt;/code&gt; from the incoming message. The second Lambda parameter
represents a &lt;code&gt;router mapping&lt;/code&gt; - something similar to &lt;code&gt;&amp;lt;mapping&amp;gt;&lt;/code&gt; sub-element for the &lt;code&gt;&amp;lt;router&amp;gt;&lt;/code&gt; component from
Spring Integration XML configuration. However since we are using Java we can go a bit further with its Lambda support!
The Spring Integration Java DSL introduced the &lt;code&gt;subflow&lt;/code&gt; definition for &lt;code&gt;router&lt;/code&gt;s in addition to traditional &lt;code&gt;channel
mapping&lt;/code&gt;. Each subflow is executed depending on the routing and, if the subflow produces a result, it is passed to the
next element in the flow definition after the router.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line17"&gt;&lt;/a&gt;
17. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.subFlowMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;true&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, sf &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sf &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Specifies the integration flow for the current router's &lt;code&gt;mappingKey&lt;/code&gt;. We have in
this samples two subflows - &lt;code&gt;hot&lt;/code&gt; and &lt;code&gt;iced&lt;/code&gt;. The subflow is the same &lt;code&gt;IntegrationFlow&lt;/code&gt; functional interface, therefore
we can use its Lambda exactly the same as we do on the top level &lt;code&gt;IntegrationFlow&lt;/code&gt; definition. The subflows don't
have any runtime dependency with its parent, it's just a logical relationship.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line18"&gt;&lt;/a&gt;
18. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.channel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;span class="pl-k"&gt;.&lt;/span&gt;queue(&lt;span class="pl-c1"&gt;10&lt;/span&gt;))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We already know that a Lambda definition for the &lt;code&gt;IntegrationFlow&lt;/code&gt; starts from &lt;code&gt;[FLOW_BEAN_NAME].input&lt;/code&gt; &lt;code&gt;DirectChannel&lt;/code&gt;,
so it may be a question "how does it work here if we specify &lt;code&gt;.channel()&lt;/code&gt; again?". The DSL takes care of such a case
and wires those two channels with a &lt;code&gt;BridgeHandler&lt;/code&gt; and endpoint. In our sample, we use here a restricted
&lt;code&gt;QueueChannel&lt;/code&gt; to reflect the Cafe kitchen busy state from real life. And here is a place where we need that
&lt;code&gt;global poller&lt;/code&gt; for the next endpoint which is listening on this channel.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line19"&gt;&lt;/a&gt;
19. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.publishSubscribeChannel(c &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; c&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.publishSubscribeChannel()&lt;/code&gt; EIP-method is a variant of the &lt;code&gt;.channel()&lt;/code&gt; for a
&lt;code&gt;MessageChannels.publishSubscribe()&lt;/code&gt;, but with the &lt;code&gt;.subscribe()&lt;/code&gt; option when we can specify subflow as a subscriber to
the channel. Right, subflow one more time! So, subflows can be specified to any depth. Independently of the presence
&lt;code&gt;.subscribe()&lt;/code&gt; subflows, the next endpoint in the parent flow is also a subscriber to this &lt;code&gt;.publishSubscribeChannel()&lt;/code&gt;.
Since we are in the &lt;code&gt;.route()&lt;/code&gt; subflow already, the last subscriber is an implicit &lt;code&gt;BridgeHandler&lt;/code&gt; which just pops the
message to the top level - to a similar implicit &lt;code&gt;BridgeHandler&lt;/code&gt; to pop message to the next &lt;code&gt;.transform()&lt;/code&gt; endpoint in
the main flow. And one more note about this current position of our flow: the previous EIP-method is
&lt;code&gt;.channel(c -&amp;gt; c.queue(10))&lt;/code&gt; and this one is for &lt;code&gt;MessageChannel&lt;/code&gt; too. So, they are again tied with an implicit
&lt;code&gt;BridgeHandler&lt;/code&gt; as well. In a real application we could avoid this &lt;code&gt;.publishSubscribeChannel()&lt;/code&gt; just with the single
&lt;code&gt;.handle()&lt;/code&gt; for the Cafe kitchen, but our goal here to cover DSL features as much as possible. That's why we distribute
the kitchen work to several subflows for the same &lt;code&gt;PublishSubscribeChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line20"&gt;&lt;/a&gt;
20. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.subscribe(s &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.subscribe()&lt;/code&gt; method accepts an &lt;code&gt;IntegrationFlow&lt;/code&gt; as parameter, which can be specified as Lambda to
configure subscriber as &lt;code&gt;subflow&lt;/code&gt;. We use here several subflow subscribers to avoid multi-line Lambdas and cover some
 DSL as we as Spring Integration capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line21"&gt;&lt;/a&gt;
21. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;s&lt;span class="pl-k"&gt;.&lt;/span&gt;handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sleepUninterruptibly(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use a simple &lt;code&gt;.handle()&lt;/code&gt; EIP-method just to block the current Thread for some timeout to demonstrate how
quickly the Cafe kitchen prepares a drink. Here we use Google Guava &lt;code&gt;Uninterruptibles.sleepUninterruptibly&lt;/code&gt;, to
avoid using a &lt;code&gt;try...catch&lt;/code&gt; block within the Lambda expression, although you can do that and your Lambda will
be multi-line. Or you can move that code to a separate method and use it here as &lt;code&gt;method reference&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since we don't
use any &lt;code&gt;Executor&lt;/code&gt; on the &lt;code&gt;.publishSubscribeChannel()&lt;/code&gt; all subscribers will beperformed sequentially on the same
Thread; in our case it is one of &lt;code&gt;TaskScheduler&lt;/code&gt;'s Threads from &lt;code&gt;poller&lt;/code&gt; on the previous &lt;code&gt;QueueChannel&lt;/code&gt;. That's why
this &lt;code&gt;sleep&lt;/code&gt; blocks all downstream process and allows to demonstrate the &lt;code&gt;busy state&lt;/code&gt; for that restricted to 10
&lt;code&gt;QueueChannel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line22"&gt;&lt;/a&gt;
22. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.subscribe(sub &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sub&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next subflow subscriber which will be performed only after that &lt;code&gt;sleep&lt;/code&gt; with 1 second for &lt;code&gt;iced&lt;/code&gt; drink. We
use here one more subflow because &lt;code&gt;.handle()&lt;/code&gt; of previous one is &lt;code&gt;one-way&lt;/code&gt; with the nature of the Lambda for
&lt;code&gt;MessageHandler&lt;/code&gt;. That's why, to go ahead with process of our whole flow, we have several subscribers: some of subflows
finish after their work and don't return anything to the parent flow.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line23"&gt;&lt;/a&gt;
23. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt; &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;String&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(item &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="pl-stj"&gt;Thread&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;currentThread()&lt;span class="pl-k"&gt;.&lt;/span&gt;getName()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; prepared cold drink #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;coldDrinkCounter&lt;span class="pl-k"&gt;.&lt;/span&gt;incrementAndGet()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; for order #&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber()
                  &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; item)         &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;transformer&lt;/code&gt; in the current subscriber subflow is to convert the &lt;code&gt;OrderItem&lt;/code&gt; to the friendly STDOUT message for
the next &lt;code&gt;.handle&lt;/code&gt;. Here we see the use of generics with the Lambda expression. This is implemented using the
&lt;code&gt;GenericTransformer&lt;/code&gt; functional interface.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line24"&gt;&lt;/a&gt;
24. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(m&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())))))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.handle()&lt;/code&gt; here just to demonstrate how to use Lambda expression to print the &lt;code&gt;payload&lt;/code&gt; to STDOUT.
It is a signal that our drink is ready. After that the final (implicit) subscriber to the
&lt;code&gt;PublishSubscribeChannel&lt;/code&gt; just sends the message with the &lt;code&gt;OrderItem&lt;/code&gt; to the &lt;code&gt;.transform()&lt;/code&gt; in the main flow.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line25"&gt;&lt;/a&gt;
25. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.subFlowMapping(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;false&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, sf &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sf&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.subFlowMapping()&lt;/code&gt; for the &lt;code&gt;hot&lt;/code&gt; drinks. Actually it is similar to the previous &lt;code&gt;iced&lt;/code&gt; drinks subflow, but
with specific &lt;code&gt;hot&lt;/code&gt; business logic.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line26"&gt;&lt;/a&gt;
26. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;s&lt;span class="pl-k"&gt;.&lt;/span&gt;handle(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; sleepUninterruptibly(&lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-stj"&gt;TimeUnit&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;SECONDS&lt;/span&gt;)))&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;sleepUninterruptibly&lt;/code&gt; for &lt;code&gt;hot&lt;/code&gt; drinks. Right, we need more time to boil the water!&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line27"&gt;&lt;/a&gt;
27. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt; &lt;span class="pl-c1"&gt;.&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-stj"&gt;OrderItem&lt;/span&gt;, &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;transform(orderItem &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Drink&lt;/span&gt;(orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getDrinkType(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;isIced(),
          orderItem&lt;span class="pl-k"&gt;.&lt;/span&gt;getShots()))      &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The main &lt;code&gt;OrderItem&lt;/code&gt; to &lt;code&gt;Drink&lt;/code&gt; &lt;code&gt;transformer&lt;/code&gt;, which is performed when the &lt;code&gt;.route()&lt;/code&gt; subflow returns its result
after the Cafe kitchen subscribers have finished preparing the drink.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line28"&gt;&lt;/a&gt;
28. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.aggregate(aggregator &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; aggregator&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.aggregate()&lt;/code&gt; EIP-method provides similar options to configure an &lt;code&gt;AggregatingMessageHandler&lt;/code&gt; and its endpoint,
like we can do with the &lt;code&gt;&amp;lt;aggregator&amp;gt;&lt;/code&gt; component when using Spring Integration XML configuration. Of course, with the Java DSL
we have more power to configure the aggregator just in place, without any other extra beans. And Lambdas come to the rescue again!
From the Cafe business logic perspective we compose the &lt;code&gt;Delivery&lt;/code&gt; for the initial &lt;code&gt;Order&lt;/code&gt;, since we &lt;code&gt;.split()&lt;/code&gt; the original order
to the &lt;code&gt;OrderItem&lt;/code&gt;s near the beginning.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line29"&gt;&lt;/a&gt;
29. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.outputProcessor(group &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.outputProcessor()&lt;/code&gt; of the &lt;code&gt;AggregatorSpec&lt;/code&gt; allows us to emit a custom result after aggregator completes the
group. It's an analogue of &lt;code&gt;ref&lt;/code&gt;/&lt;code&gt;method&lt;/code&gt; from the &lt;code&gt;&amp;lt;aggregator&amp;gt;&lt;/code&gt; component or the &lt;code&gt;@Aggregator&lt;/code&gt; annotation on a POJO method.
Our goal here to compose a &lt;code&gt;Delivery&lt;/code&gt; for all &lt;code&gt;Drink&lt;/code&gt;s.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line30"&gt;&lt;/a&gt;
30. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Delivery&lt;/span&gt;(group&lt;span class="pl-k"&gt;.&lt;/span&gt;getMessages()
            .stream()
            .map(message &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; (&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;) message&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())
            .collect(&lt;span class="pl-stj"&gt;Collectors&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;toList())))    &lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see we use here the Java 8 &lt;code&gt;Stream&lt;/code&gt; feature for &lt;code&gt;Collection&lt;/code&gt;. We iterate over messages from the released &lt;code&gt;MessageGroup&lt;/code&gt;
 and convert (&lt;code&gt;map&lt;/code&gt;) each of them to its &lt;code&gt;Drink&lt;/code&gt; &lt;code&gt;payload&lt;/code&gt;. The result of the &lt;code&gt;Stream&lt;/code&gt; (&lt;code&gt;.collect()&lt;/code&gt;) (a list of &lt;code&gt;Drink&lt;/code&gt;s) is passed to the
&lt;code&gt;Delivery&lt;/code&gt; constructor. The &lt;code&gt;Message&lt;/code&gt; with this new &lt;code&gt;Delivery&lt;/code&gt; payload is sent to the next endpoint in our Cafe scenario.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line31"&gt;&lt;/a&gt;
31.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.correlationStrategy(m &lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;
          ((&lt;span class="pl-stj"&gt;Drink&lt;/span&gt;) m&lt;span class="pl-k"&gt;.&lt;/span&gt;getPayload())&lt;span class="pl-k"&gt;.&lt;/span&gt;getOrderNumber()), &lt;span class="pl-c1"&gt;null&lt;/span&gt;)&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;.correlationStrategy()&lt;/code&gt; Lambda demonstrates how we can customize an aggregator behaviour. Of course, we can
rely here just only on a built-in &lt;code&gt;SequenceDetails&lt;/code&gt; from Spring Integration, which is populated by default from
&lt;code&gt;.split()&lt;/code&gt; in the beginning of our flow to each split message, but the Lambda sample for the &lt;code&gt;CorrelationStrategy&lt;/code&gt;
is included for illustration. (With XML, we could have used a &lt;code&gt;correlation-expression&lt;/code&gt; or a custom
&lt;code&gt;CorrelationStrategy&lt;/code&gt;). The second argument in this line for the &lt;code&gt;.aggregate()&lt;/code&gt; EIP-method is for the &lt;code&gt;endpointConfigurer&lt;/code&gt; to
customize options like &lt;code&gt;autoStartup&lt;/code&gt;, &lt;code&gt;requiresReply&lt;/code&gt;, &lt;code&gt;adviceChain&lt;/code&gt; etc. We use here &lt;code&gt;null&lt;/code&gt; to show that we rely
on the default options for the endpoint. Many of EIP-methods provide overloaded versions with and without
&lt;code&gt;endpointConfigurer&lt;/code&gt;, but &lt;code&gt;.aggregate()&lt;/code&gt; requires an endpoint argument, to avoid an explicit cast for the
&lt;code&gt;AggregatorSpec&lt;/code&gt; Lambda argument.&lt;/p&gt;

&lt;p&gt;&lt;a name="user-content-line32"&gt;&lt;/a&gt;
32. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;.handle(&lt;span class="pl-stj"&gt;CharacterStreamWritingMessageHandler&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;stdout());&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is the end of our flow - the &lt;code&gt;Delivery&lt;/code&gt; is delivered to the client! We just print here the message &lt;code&gt;payload&lt;/code&gt;
to STDOUT using out-of-the-box &lt;code&gt;CharacterStreamWritingMessageHandler&lt;/code&gt; from Spring Integration Core. This is a
case to show how existing components from Spring Integration Core (and its modules) can be used from the Java DSL.&lt;/p&gt;

&lt;p&gt;Well, we have finished describing the Cafe Demo sample based on the Spring Integration Java DSL.
Compare it with &lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/applications/cafe/cafe-si"&gt;XML sample&lt;/a&gt;
to get more information regarding Spring Integration.&lt;/p&gt;

&lt;p&gt;This is not an overall tutorial to the DSL stuff. We don't review here the &lt;code&gt;endpointConfigurer&lt;/code&gt; options, &lt;code&gt;Transformers&lt;/code&gt;
factory, the &lt;code&gt;IntegrationComponentSpec&lt;/code&gt; hierarchy, the &lt;code&gt;NamespaceFactories&lt;/code&gt;, how we can specify several
&lt;code&gt;IntegrationFlow&lt;/code&gt; beans and wire them to a single application etc., see the
&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/wiki/Spring-Integration-Java-DSL-Reference"&gt;Reference Manual&lt;/a&gt;
for more information.&lt;/p&gt;

&lt;p&gt;At least this line-by-line tutorial should show you Spring Integration Java DSL basics and its seamless fusion between
Spring Framework Java &amp;amp; Annotation configuration, Spring Integration foundation and Java 8 Lambda support!&lt;/p&gt;

&lt;p&gt;Also see the &lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/dsl/si4demo"&gt;si4demo&lt;/a&gt; to
see the evolution of Spring Integration including the Java DSL, as shown at the 2014 SpringOne/2GX Conference. (Video should be available soon).&lt;/p&gt;

&lt;p&gt;As always, we look forward to your comments and feedback (&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt;
(&lt;code&gt;spring-integration&lt;/code&gt; tag), &lt;a href="https://jira.spring.io/browse/INTEXT"&gt;Spring JIRA&lt;/a&gt;,
&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/issues"&gt;GitHub&lt;/a&gt;) and we very much welcome
&lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;P.S. Even if this tutorial is fully based on the Java 8 Lambda support, we don't want to miss pre Java 8 users, we are going to provide similar non-Lambda blog post. Stay tuned!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 1.0.0.M3 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/25/spring-cloud-1-0-0-m3-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2014-11-25:1861</id>
    <updated>2014-11-25T09:23:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://projects.spring.io/spring-cloud"&gt;Spring Cloud&lt;/a&gt; 1.0.0.M3 is available now in the repo.spring.io repository. The following projects all had a 1.0.0.M3 release:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Config: centralized key-value (or YAML) configuration management. Now supports the config server being fully embedded in another application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Netflix. Also has better support for embeddability of the server components. Now also properly records load balancer statistics in Ribbon-enabled Spring &lt;code&gt;RestTemplate&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud for Amazon Web Services. Has new Spring Boot integration points, externalizing configuration for AWS metadata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Security: super simple OAuth2 in a declarative style.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Bus: broadcasts framework-level events to Spring Cloud components. Big news here is that we now have a &lt;a href="https://github.com/spring-cloud/spring-cloud-bus/tree/master/spring-cloud-bus-turbine"&gt;RabbitMQ-based aggregator&lt;/a&gt; for Hystrix metrics (based on Turbine 2), so you don't have to rely on having direct HTTP access to all service instances.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud CLI: Groovy CLI for writing microservices in self-contained scripts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud for Cloud Foundry: now bridges between Spring Cloud Security and Cloud Foundry service bindings, making it super easy to do Single Sign On and OAutth2 protected resources in Cloud Foundry.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these modules now depend on Spring Boot 1.2.0.RC2 with the intention that we move to 1.2.0.RELEASE when it becomes available. Together with the starters (dependency management helpers, also released now at 1.0.0.M3) these represent almost all of Spring Cloud, with the exception of Spring Cloud Connectors, which should see a 1.1.1 release soon.&lt;/p&gt;

&lt;p&gt;We are making good progress towards a release candidate for 1.0.0 in December, and would like to thank the community for contributing on github and getting involved by trying out the early milestones.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - November 25th, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/25/this-week-in-spring-november-25th-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-11-25:1860</id>
    <updated>2014-11-25T00:03:00Z</updated>
    <content type="html">&lt;p&gt;Egads! Can you believe it's already almost the end of the year? Time has been screaming fast! It's the week of Thanksgiving for those of us in the United States. This is a wonderful time of year to sit back, find a nice &lt;a href="http://spring.io/guides"&gt;Spring IO guide&lt;/a&gt; or blog to read, and then build something awesome.. oh, and it's an ideal time to spend in the company of friends and family and to reflect on those and that for which we're grateful. I'm sure I speak for the Spring team and Pivotal at large when I say that we're grateful for you, our inspiring community, users and customers.&lt;/p&gt;

&lt;p&gt;But if you &lt;em&gt;do&lt;/em&gt; want something to read, too, we have quite a roundup this week! So, without further ado..!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Spring Integration ninja Artem Bilan &lt;a href="https://spring.io/blog/2014/11/24/spring-integration-java-dsl-1-0-ga-released"&gt;just announced the Spring Integration Java Configuration DSL, 1.0.RELEASE&lt;/a&gt;! Hurrah! This release has been a &lt;em&gt;long&lt;/em&gt; time in coming, and I hope you'll check it out! Artem Bilan Gary Russell have done an &lt;em&gt;amazing&lt;/em&gt; job bringing this API to fruition. Check the blog for a list of resources you can consult.&lt;/li&gt;
&lt;li&gt; Spring XD co-lead Dr. Mark Pollack just announced &lt;a href="https://spring.io/blog/2014/11/19/spring-xd-1-1-m1-and-1-0-2-released"&gt;Spring XD 1.1.M1 and 1.0.2&lt;/a&gt;. 1.1 is marching towards GA and offers support for Apache Spark, Python, Apache Kafka, improved HDFS sink functionality, LDAP authentication, Java configuraton, Redis and JDBC sources, and Zookeeper. And that's just for starters! The good doctor briefly hints at what'll be coming in the next pre-1.1 release! Read the blog for more and for details on what's available in 1.0.2!&lt;/li&gt;
&lt;li&gt; Spring Boot &lt;a href="https://spring.io/blog/2014/11/23/bootiful-java-ee-support-in-spring-boot-1-2"&gt;co-lead Phil Webb just announced Spring Boot 1.2.0.RC2&lt;/a&gt;, packed with &lt;em&gt;lots&lt;/em&gt; of new features! &lt;a href="http://start.spring.io"&gt;Try it out and kick the tires&lt;/a&gt; now!&lt;/li&gt;
&lt;li&gt; I wrote about &lt;a href="https://spring.io/blog/2014/11/23/bootiful-java-ee-support-in-spring-boot-1-2"&gt;some of the new features in Spring Boot 1.2 designed to support common Java EE APIs&lt;/a&gt; like JAX-RS and JTA and the new support for &lt;a href="http://undertow.io"&gt;Undertow&lt;/a&gt; HTTP engine which powers RedHat's WildFly application server.&lt;/li&gt;
&lt;li&gt; The DISID corporation has just released the &lt;a href="https://spring.io/blog/2014/11/21/spring-roo-1-3-0-introduces-jdk-8-support"&gt;first release of Spring Roo under their leadership, 1.3, which brings complete JDK 8 support&lt;/a&gt; for both Spring Roo and Spring Roo-generated applications.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt; ZeroTurnaround's Adam Koblentz and I did a webinar introducing &lt;a href="https://spring.io/blog/2014/11/24/webinar-replay-spring-boot-and-jrebel-6-0"&gt;how to use Spring Boot and JRebel to reduce iteration time&lt;/a&gt; with reloadable classes.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt; Check out this replay of Ben Hale's SpringOne2gx 2014 talk, &lt;a href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-creating-rest-ful-hypermedia-based-micro-services-with-spring-boot"&gt;&lt;em&gt;Creating REST-ful, Hypermedia-based Microservices with Spring Boot&lt;/em&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt; Matt Stine's 2014 talk on developing &lt;a href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-developing-microservices-for-paas-with-spring-and-cloud-foundry"&gt;PaaS-ready microservces with Spring and Cloud Foundry&lt;/a&gt; is also online.&lt;/li&gt;
&lt;li&gt; Cornelia Davis' SpringOne2GX 2014 talk on &lt;a href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-running-your-spring-apps-in-the-cloud"&gt;running Spring applications in the cloud (like Cloud Foundry)&lt;/a&gt; is also online.&lt;/li&gt;
&lt;li&gt;Watch Spring ninja Greg Turnquist build &lt;a href="https://spring.io/blog/2014/11/20/screencast-how-to-create-a-restful-app-in-five-minutes-or-less"&gt;and run a REST service based on Spring Boot in 5 minutes&lt;/a&gt;. Why? 'Cuz he &lt;em&gt;can&lt;/em&gt;!&lt;/li&gt;
&lt;li&gt;I gave a quick interview just after speaking at &lt;a href="https://www.voxxed.com/blog/interview/josh-long-booting-productivity-with-spring-and-cloudy-news/"&gt;Geekout UK&lt;/a&gt; on all things Spring, Cloud Foundry, microservice and more. Check it out!&lt;/li&gt;
&lt;li&gt;Check out this &lt;a href="http://www.activestate.com/blog/2014/08/microservices-and-paas-part-i"&gt;interesting series on building microservices for PaaS&lt;/a&gt; by the Cloud Foundry ecosystem partner ActiveState. The first article is there, scroll down for the next installments in the series.&lt;/li&gt;
&lt;li&gt;Want to understand the differences between ZookKeeper and Netflix's Consul? &lt;a href="http://www.slideshare.net/IvanGlushkov/zookeeper-vs-consul-41882991"&gt;Check out this neat slide deck&lt;/a&gt; by Ivan Glushkov. 13.&lt;/li&gt;
&lt;li&gt;Our pal Simon Maple over at &lt;a href="http://zeroturnaround.com"&gt;ZeroTurnaround&lt;/a&gt; put together this look at how to quickly build &lt;a href="http://zeroturnaround.com/rebellabs/what-you-can-build-for-free-in-2-hours-with-spring-boot-twitter-and-facebook/"&gt;a Spring Boot application that talks to Facebook, quickly&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Jacob Severson over on the &lt;em&gt;Object Partners&lt;/em&gt; blog has a great post on &lt;a href="http://www.objectpartners.com/2014/11/18/udp-server-with-spring-boot-and-reactor/"&gt;using the Reactor project (and Spring Boot) to build a UDP service&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Check out this post on the &lt;em&gt;All and Sundry&lt;/em&gt; blog on how to persist HTTP session state in a backing store like &lt;a href="http://redis.io"&gt;Redis&lt;/a&gt; using &lt;a href="http://www.java-allandsundry.com/2014/11/externalizing-session-state-for-spring.html"&gt;Spring Session&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check out this blog on how &lt;a href="https://looksok.wordpress.com/2014/11/22/spring-boot-sslhttps-for-embedded-tomcat/"&gt;to setup HTTPS using embedded Apache Tomcat with Spring Boot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check out this Chinese-language &lt;a href="http://www.cnblogs.com/smarterplanet/p/4087577.html"&gt;introduction to using Spring Security&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;AirPair has a very interesting post on &lt;a href="https://www.airpair.com/java/posts/spring-streams-memory-efficiency"&gt;using Java 8 &lt;code&gt;Stream&lt;/code&gt;s to &lt;em&gt;stream&lt;/em&gt; data back to the client for memory-intensive usecases&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As we head into the Thanksgiving holiday here where we'll load up on Turkey and then binge-watch Netflix, remember that new estimates suggest that &lt;a href="http://arstechnica.com/information-technology/2014/11/netflix-takes-up-9-5-of-upstream-traffic-on-the-north-american-internet/"&gt;Netflix takes up 9.5% of &lt;em&gt;upstream&lt;/em&gt; traffic on the North American internet&lt;/a&gt;. Don't even ask about &lt;em&gt;downstream&lt;/em&gt;! To learn about the microservice stack (including Spring and, increasingly, Spring Boot) that Neflix uses to scale and to learn how to integrate it all with Spring Cloud, &lt;a href="https://www.youtube.com/watch?v=VPtlZLdm7Nc"&gt;check out this webinar that I delivered a few months ago&lt;/a&gt;! Once the turkey's done, then come the &lt;em&gt;sales&lt;/em&gt;! China just celebrated a similarly major shopping event where one online e-tailer, Alibaba, raked in $9.3 &lt;em&gt;BILLION&lt;/em&gt; in sales in one day building atop Spring. I wrote about their crazy scale in a blog a last year, &lt;a href="https://spring.io/blog/2013/03/04/spring-at-china-scale-alibaba-group-alipay-taobao-and-tmall/"&gt;Spring at China scale&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you&lt;/em&gt; and happy Thanksgiving!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Spring Boot and JRebel 6.0</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/24/webinar-replay-spring-boot-and-jrebel-6-0" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-24:1859</id>
    <updated>2014-11-24T14:29:00Z</updated>
    <content type="html">&lt;p&gt; Speakers: Josh Long, Pivotal + Adam Koblentz - ZeroTurnaround &lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/joshlong/bootiful-jrebel"&gt;https://speakerdeck.com/joshlong/bootiful-jrebel&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Spring Boot gives you a huge leg up over normal starter projects, now let's give you another boost by adding JRebel. With JRebel, the average Java developer saves over 1 work-month per year by using JRebel to skip rebuild, restart, and redeploys of their application. JRebel 6 launches on November 4, 2014 and includes complete Spring Boot integration. Join Spring's Josh Long and ZeroTurnaround's Adam Koblentz and learn how to combine Boot with JRebel and get more done, in less time with less configuration.&lt;/p&gt;

&lt;p&gt; Learn more about Spring Boot: &lt;a href="http://projects.spring.io/spring-boot"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Learn more about JRebel: &lt;a href="http://zeroturnaround.com/software/jrebel/display/"&gt;http://zeroturnaround.com/software/jrebel/display/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; 14 day free JRebel trial download: &lt;a href="https://zeroturnaround.com/software/jrebel/trial/"&gt;https://zeroturnaround.com/software/jrebel/trial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/N5FHiONGOsg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Creating REST-ful, Hypermedia-based Micro-services with Spring Boot</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-creating-rest-ful-hypermedia-based-micro-services-with-spring-boot" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-24:1857</id>
    <updated>2014-11-24T10:59:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014.&lt;/p&gt;

&lt;p&gt;Speaker: Ben Hale @nebhale &lt;/p&gt;

&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/creating-restful-hypermediabased-microservices-with-spring-boot"&gt;http://www.slideshare.net/SpringCentral/creating-restful-hypermediabased-microservices-with-spring-boot&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;As data-driven applications become ubiquitous, the services that provide the data are proliferating. As teams become responsible for more and more of these services, it becomes critical that they be designed and implemented in a way that is as lightweight as possible. This session will cover how to design micro-services as RESTful APIs and implement them with minimal code using Spring Boot. It will focus on API design using REST and HATEOAS, with live coding progressing from a tweet-length implementation all the way to a full-fledged app running in the cloud.&lt;/p&gt;

&lt;p&gt; Along the way we'll see how to leverage technologies such as Spring Boot and Reactor to develop microservices targeted at Cloud Foundry.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/zbeMDM-zDNI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Developing Microservices for PaaS with Spring and Cloud Foundry</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-developing-microservices-for-paas-with-spring-and-cloud-foundry" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-24:1856</id>
    <updated>2014-11-24T10:54:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;

&lt;p&gt;Speaker: Matt Stine &lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/developing-microservices-for-paas-with-spring-and-cloud-foundry"&gt;http://www.slideshare.net/SpringCentral/developing-microservices-for-paas-with-spring-and-cloud-foundry&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Marc Andressen has famously said "Software is eating the world." What does that mean? We take it to mean that multiple industries with historically entrenched leaders are being disrupted by businesses built around a software core. These software factories are characterized by: tight feedback loops rapid iteration horizontal scaling mobile-first UX continuous delivery These factors have contributed to drive a change in how we approach infrastructure, which has taken the lead in adapting to meet these needs with the move to the cloud, and Platform as a Service (PaaS) offerings like Cloud Foundry have raised the level of abstraction to a focus on an ecosystem of applications and services. However, most applications are still developed as if we're living in the previous generation of both business and infrastructure: the monolithic application. Microservices - small, loosely coupled applications that follow the Unix philosophy of ""doing one thing well"" - represent the application development side of enabling rapid, iterative development, horizontal scale, polyglot clients, and continuous delivery. They also enable us to scale application development and eliminate long term commitments to a single technology stack. While microservices are simple, they are certainly not easy. It's recently been said that "microservices are not a free lunch." Interestingly enough, if you look at the concerns typically expressed about microservices, you'll find that they are exactly the challenges that a PaaS is intended to address. So while microservices do not necessarily imply cloud (and vice versa), there is in fact a symbiotic relationship between the two, with each approach somehow compensating for the limitations of the other, much like the practices of eXtreme Programming do the same. This session will describe architectural patterns for developing microservices: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Service Decomposition &lt;/li&gt;
  &lt;li&gt;API Gateways&lt;/li&gt;
  &lt;li&gt; Stateless / Shared-Nothing&lt;/li&gt;
  &lt;li&gt; Apps Configuration and Backing Service&lt;/li&gt;
  &lt;li&gt; Consumption &lt;/li&gt;
  &lt;li&gt;Fault Tolerance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; Along the way we'll see how to leverage technologies such as Spring Boot and Reactor to develop microservices targeted at Cloud Foundry.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/iMvCOEsSuAc" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Running Your Spring Apps in the Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/24/springone2gx-2014-replay-running-your-spring-apps-in-the-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-11-24:1855</id>
    <updated>2014-11-24T10:54:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;

&lt;p&gt;Speaker: Cornelia Davis &lt;/p&gt;

&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/running-your-spring-apps-in-the-cloud"&gt;http://www.slideshare.net/SpringCentral/running-your-spring-apps-in-the-cloud&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The Spring Trader application was debuted at SpringOne 2GX in 2012 and presented an application that demonstrates a multitude of Pivotal Application Fabric components working together – tcServer, RabbitMQ, SQLFire and Gemfire. In this session we will take that application and make (a few) modifications (mostly to config) to get it running on the same components in the cloud, specifically on the Cloud Foundry PaaS. We’ll show you how to use the Spring Cloud project to configure the deployment, how to leverage a cloud services catalog, how to implement a cross-site scripting solution (and why), how to do session state caching and we’ll discuss (the dangers of) auto reconfiguration. If you bring a laptop you can have your own instance of the app running by the end of the session.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/nuiNvI5HYkU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration Java DSL 1.0 GA Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/24/spring-integration-java-dsl-1-0-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-11-24:1854</id>
    <updated>2014-11-24T10:17:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;

&lt;p&gt;As we promised in the Release Candidate &lt;a href="https://spring.io/blog/2014/10/31/spring-integration-java-dsl-1-0-rc1-released"&gt;blog post&lt;/a&gt;,
we are pleased to announce that the Spring Integration Java DSL 1.0 GA is now available.
As usual, use the &lt;a href="http://repo.springsource.org/release"&gt;Release Repository&lt;/a&gt; with Maven or Gradle,
or download a
&lt;a href="http://repo.spring.io/release/org/springframework/integration/spring-integration-java-dsl/1.0.0.RELEASE"&gt;distribution archive&lt;/a&gt;,
to give it a spin.&lt;/p&gt;

&lt;p&gt;See the project &lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/wiki/Spring-Integration-Java-DSL-Reference"&gt;home page&lt;/a&gt;
for more information.&lt;/p&gt;

&lt;p&gt;First of all, we are glad to share with you that on Nov 12, 2014, &lt;a href="http://dzone.com/research/guide-to-enterprise-integration"&gt;DZone research&lt;/a&gt;
recognized Spring Integration as the leader in the ESB / Integration framework space, leading with 42% marketshare,
in a publication of their recent survey results.
And the report is the most popular DZone Guide in November, with more than 12 000 downloads already! Don't miss it: very
exciting. We hope the release of the Spring Integration Java DSL adds more excitement!.&lt;/p&gt;

&lt;p&gt;Many thanks to all contributors, including several who are new to the community.&lt;/p&gt;

&lt;p&gt;The release includes just a few bug fixes, since the release candidate, and a lot of JavaDocs!&lt;/p&gt;

&lt;p&gt;Not specifically related to the the release, I want to present here some resources on
the matter.&lt;/p&gt;

&lt;p&gt;We are observing many valuable DSL questions on &lt;a href="http://stackoverflow.com/tags/spring-integration"&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/team/jlong"&gt;Josh Long&lt;/a&gt;'s
&lt;a href="https://spring.io/blog/2014/11/15/building-a-spring-integration-4-1-websocket-endpoint"&gt;tech tip&lt;/a&gt; showing how we can use
together Spring Boot, REST, Spring Integration 4.1 WebSocket support and Spring Integration Java DSL plus Java 8
features.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Jdbc Splitter&lt;/code&gt; implementation in the project
&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/blob/master/src/test/java/org/springframework/integration/dsl/test/jdbc/JdbcTests.java"&gt;tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My &lt;a href="https://gist.github.com/artembilan/9bd32f5e899ef293b6c2"&gt;gist&lt;/a&gt; to demonstrate how we can use &lt;a href="https://github.com/reactor/reactor"&gt;Reactor&lt;/a&gt; &lt;code&gt;Stream&lt;/code&gt;s together with the Spring Integration Java DSL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/team/dsyer"&gt;Dave Syer&lt;/a&gt; has started to use Spring Integration Java DSL in the
&lt;a href="https://github.com/spring-cloud/spring-cloud-bus"&gt;Spring Cloud Bus&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;Don't miss the &lt;a href="https://github.com/spring-projects/spring-integration-samples/tree/master/dsl/si4demo"&gt;si4demo&lt;/a&gt; to
see the evolution of Spring Integration including the Java DSL, as shown at the 2014 SpringOne/2GX Conference. (Video should be available soon).&lt;/p&gt;

&lt;p&gt;Especial thanks to &lt;a href="https://twitter.com/bijukunjummen"&gt;Biju Kunjummen&lt;/a&gt; who has done some nice articles on DZone to introduce Spring Integration Java DSL: &lt;a href="http://java.dzone.com/articles/spring-integration-java-dsl"&gt;http://java.dzone.com/articles/spring-integration-java-dsl&lt;/a&gt;, &lt;a href="http://java.dzone.com/articles/spring-integration-java-dsl-0"&gt;http://java.dzone.com/articles/spring-integration-java-dsl-0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And of course, with the latest &lt;a href="https://spring.io/blog/2014/11/19/spring-xd-1-1-m1-and-1-0-2-released"&gt;Spring XD&lt;/a&gt;, we
can build Modules based on &lt;code&gt;@Configuration&lt;/code&gt; including Spring Integration Java DSL &lt;code&gt;IntegrationFlow&lt;/code&gt; definitions.&lt;/p&gt;

&lt;p&gt;Also see the comprehensive &lt;a href="https://spring.io/blog/2014/11/25/spring-integration-java-dsl-line-by-line-tutorial"&gt;Cafe Demo: Line by line tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, we look forward to your comments and feedback (&lt;a href="http://stackoverflow.com"&gt;StackOverflow&lt;/a&gt; 
(&lt;code&gt;spring-integration&lt;/code&gt; tag), &lt;a href="https://jira.spring.io/browse/INTEXT"&gt;Spring JIRA&lt;/a&gt;, 
&lt;a href="https://github.com/spring-projects/spring-integration-java-dsl/issues"&gt;GitHub&lt;/a&gt;) and we very much welcome 
&lt;a href="https://github.com/spring-projects/spring-integration/blob/master/CONTRIBUTING.md"&gt;contributions&lt;/a&gt;!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>"Bootiful" Java EE Support in Spring Boot 1.2</title>
    <link rel="alternate" href="https://spring.io/blog/2014/11/23/bootiful-java-ee-support-in-spring-boot-1-2" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-11-23:1853</id>
    <updated>2014-11-23T13:37:00Z</updated>
    <content type="html">&lt;p&gt;In this blog, I want to look at - and demonstrate - some of the &lt;em&gt;many&lt;/em&gt; new features in &lt;a href="http://spring.io/projects/spring-boot"&gt;Spring Boot 1.2&lt;/a&gt; that make the lives of those coming from, or otherwise building on, Java EE easier.  &lt;/p&gt;

&lt;p&gt;It's worth mentioning that a lot of this support has been possible with Spring before, of course, but now with Spring Boot 1.2, it's just so darned easy!&lt;/p&gt;

&lt;p&gt;First, here's an example program with notes after.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;
&lt;span class="pl-k"&gt;package&lt;/span&gt; &lt;span class="pl-smp"&gt;demo&lt;/span&gt;;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.glassfish.jersey.jackson.JacksonFeature&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.glassfish.jersey.server.ResourceConfig&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.springframework.boot.SpringApplication&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.springframework.boot.autoconfigure.SpringBootApplication&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.springframework.jms.annotation.JmsListener&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;org.springframework.jms.core.JmsTemplate&lt;/span&gt;;

&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.annotation.PostConstruct&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.inject.Inject&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.inject.Named&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.jms.JMSException&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.persistence.*&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.transaction.Transactional&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.ws.rs.*&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;javax.ws.rs.core.MediaType&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;java.io.Serializable&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;java.util.Collection&lt;/span&gt;;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-smi"&gt;java.util.logging.Logger&lt;/span&gt;;

@&lt;span class="pl-stj"&gt;SpringBootApplication&lt;/span&gt;
&lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Application&lt;/span&gt; {

    &lt;span class="pl-st"&gt;@Named&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;JerseyConfig&lt;/span&gt; &lt;span class="pl-s"&gt;extends&lt;/span&gt; &lt;span class="pl-e"&gt;ResourceConfig&lt;/span&gt; {

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-en"&gt;JerseyConfig&lt;/span&gt;() {
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;register(&lt;span class="pl-stj"&gt;GreetingEndpoint&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;register(&lt;span class="pl-stj"&gt;JacksonFeature&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class);
        }
    }

    &lt;span class="pl-st"&gt;@Named&lt;/span&gt;
    &lt;span class="pl-st"&gt;@Transactional&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;GreetingService&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@Inject&lt;/span&gt;
        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;JmsTemplate&lt;/span&gt; jmsTemplate;

        &lt;span class="pl-st"&gt;@PersistenceContext&lt;/span&gt;
        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;EntityManager&lt;/span&gt; entityManager;

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;createGreeting&lt;/span&gt;(&lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-v"&gt;name&lt;/span&gt;, &lt;span class="pl-st"&gt;boolean&lt;/span&gt; &lt;span class="pl-v"&gt;fail&lt;/span&gt;) {
            &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt; greeting &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt;(name);
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;entityManager&lt;span class="pl-k"&gt;.&lt;/span&gt;persist(greeting);
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;jmsTemplate&lt;span class="pl-k"&gt;.&lt;/span&gt;convertAndSend(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;greetings&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, greeting);
            &lt;span class="pl-k"&gt;if&lt;/span&gt; (fail) {
                &lt;span class="pl-k"&gt;throw&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-stj"&gt;RuntimeException&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;simulated error&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
            }
        }

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;createGreeting&lt;/span&gt;(&lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-v"&gt;name&lt;/span&gt;) {
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;createGreeting(name, &lt;span class="pl-c1"&gt;false&lt;/span&gt;);
        }

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;Collection&amp;lt;&lt;span class="pl-stj"&gt;Greeting&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-en"&gt;findAll&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;entityManager
                    .createQuery(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;select g from &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class&lt;span class="pl-k"&gt;.&lt;/span&gt;getName() &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt; g&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class)
                    .getResultList();
        }

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt; &lt;span class="pl-en"&gt;find&lt;/span&gt;(&lt;span class="pl-stj"&gt;Long&lt;/span&gt; &lt;span class="pl-v"&gt;id&lt;/span&gt;) {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;entityManager&lt;span class="pl-k"&gt;.&lt;/span&gt;find(&lt;span class="pl-stj"&gt;Greeting&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, id);
        }
    }

    &lt;span class="pl-st"&gt;@Named&lt;/span&gt;
    &lt;span class="pl-st"&gt;@Path&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    &lt;span class="pl-st"&gt;@Produces&lt;/span&gt;({&lt;span class="pl-stj"&gt;MediaType&lt;/span&gt;&lt;span class="pl-c1"&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;APPLICATION_JSON&lt;/span&gt;})
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;GreetingEndpoint&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@Inject&lt;/span&gt;
        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;GreetingService&lt;/span&gt; greetingService;

        &lt;span class="pl-st"&gt;@POST&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;post&lt;/span&gt;(&lt;span class="pl-st"&gt;@QueryParam&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;name&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-v"&gt;name&lt;/span&gt;) {
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;createGreeting(name);
        }

        &lt;span class="pl-st"&gt;@GET&lt;/span&gt;
        &lt;span class="pl-st"&gt;@Path&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/{id}&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;Greeting&lt;/span&gt; &lt;span class="pl-en"&gt;get&lt;/span&gt;(&lt;span class="pl-st"&gt;@PathParam&lt;/span&gt;(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-stj"&gt;Long&lt;/span&gt; &lt;span class="pl-v"&gt;id&lt;/span&gt;) {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;find(id);
        }
    }

    &lt;span class="pl-st"&gt;@Entity&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Greeting&lt;/span&gt; &lt;span class="pl-s"&gt;implements&lt;/span&gt; &lt;span class="pl-e"&gt;Serializable&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@Id&lt;/span&gt;
        &lt;span class="pl-st"&gt;@GeneratedValue&lt;/span&gt;
        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;Long&lt;/span&gt; id;

        &lt;span class="pl-st"&gt;@Override&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-en"&gt;toString&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Greeting{&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt;
                    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;id=&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; id &lt;span class="pl-k"&gt;+&lt;/span&gt;
                    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;, message='&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; message &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-cce"&gt;\'&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt;
                    &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;;
        }

        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; message;

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-en"&gt;getMessage&lt;/span&gt;() {
            &lt;span class="pl-k"&gt;return&lt;/span&gt; message;
        }

        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-en"&gt;Greeting&lt;/span&gt;(&lt;span class="pl-stj"&gt;String&lt;/span&gt; &lt;span class="pl-v"&gt;name&lt;/span&gt;) {
            &lt;span class="pl-v"&gt;this&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;message &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Hi, &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; name &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;;
        }

        &lt;span class="pl-en"&gt;Greeting&lt;/span&gt;() {
        }
    }

    &lt;span class="pl-st"&gt;@Named&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;GreetingServiceClient&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@Inject&lt;/span&gt;
        &lt;span class="pl-s"&gt;private&lt;/span&gt; &lt;span class="pl-stj"&gt;GreetingService&lt;/span&gt; greetingService;

        &lt;span class="pl-st"&gt;@PostConstruct&lt;/span&gt;
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;afterPropertiesSet&lt;/span&gt;() &lt;span class="pl-s"&gt;throws&lt;/span&gt; &lt;span class="pl-stj"&gt;Exception&lt;/span&gt; {
            greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;createGreeting(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Phil&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
            greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;createGreeting(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Dave&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
            &lt;span class="pl-k"&gt;try&lt;/span&gt; {
                greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;createGreeting(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Josh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;true&lt;/span&gt;);
            } &lt;span class="pl-k"&gt;catch&lt;/span&gt; (&lt;span class="pl-stj"&gt;RuntimeException&lt;/span&gt; re) {
                &lt;span class="pl-stj"&gt;Logger&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;getLogger(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class&lt;span class="pl-k"&gt;.&lt;/span&gt;getName())&lt;span class="pl-k"&gt;.&lt;/span&gt;info(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;caught exception...&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
            }
            greetingService&lt;span class="pl-k"&gt;.&lt;/span&gt;findAll()&lt;span class="pl-k"&gt;.&lt;/span&gt;forEach(&lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;::&lt;/span&gt;println);
        }
    }

    &lt;span class="pl-st"&gt;@Named&lt;/span&gt;
    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-s"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;GreetingMessageProcessor&lt;/span&gt; {

        &lt;span class="pl-st"&gt;@JmsListener&lt;/span&gt;(&lt;span class="pl-c1"&gt;destination&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;greetings&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
        &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;processGreeting&lt;/span&gt;(&lt;span class="pl-stj"&gt;Greeting&lt;/span&gt; &lt;span class="pl-v"&gt;greeting&lt;/span&gt;) &lt;span class="pl-s"&gt;throws&lt;/span&gt; &lt;span class="pl-stj"&gt;JMSException&lt;/span&gt; {
            &lt;span class="pl-stj"&gt;System&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;out&lt;span class="pl-k"&gt;.&lt;/span&gt;println(&lt;span class="pl-s1"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;received message: &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;+&lt;/span&gt; greeting);
        }
    }

    &lt;span class="pl-s"&gt;public&lt;/span&gt; &lt;span class="pl-s"&gt;static&lt;/span&gt; &lt;span class="pl-st"&gt;void&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;(&lt;span class="pl-st"&gt;String&lt;/span&gt;[] &lt;span class="pl-v"&gt;args&lt;/span&gt;) {
        &lt;span class="pl-stj"&gt;SpringApplication&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;run(&lt;span class="pl-stj"&gt;Application&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;class, args);
    }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The complete  code listings, including the very sparce &lt;a href="https://github.com/joshlong/techtips/blob/master/examples/jaxrs-jta-jms-jpa-330-250-undertow/src/main/resources/application.properties"&gt;&lt;code&gt;application.properties&lt;/code&gt;&lt;/a&gt; and the &lt;a href="https://github.com/joshlong/techtips/blob/master/examples/jaxrs-jta-jms-jpa-330-250-undertow/pom.xml"&gt;Maven build&lt;/a&gt;, are available online. &lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-jax-rs-with-jersey" class="anchor" href="#jax-rs-with-jersey" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;JAX-RS with Jersey&lt;/h2&gt;

&lt;p&gt;The example &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-jersey"&gt;demonstrates Boot's new JAX-RS auto-configuration&lt;/a&gt; (in this case, using &lt;a href="https://jersey.java.net/"&gt;Jersey 2.x&lt;/a&gt;) in the &lt;code&gt;GreetingEndpoint&lt;/code&gt;. Note how convenient it is to get it all working! The only thing to be weary of is that you need to specify a &lt;code&gt;ResourceConfig&lt;/code&gt; subclass to let Jersey know which components to register.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-global-transactions-with-jta" class="anchor" href="#global-transactions-with-jta" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Global Transactions with JTA&lt;/h2&gt;

&lt;p&gt;It demonstrates global transactions with the &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-jta"&gt;new auto-configured JTA support&lt;/a&gt;. JTA is a Java API for the X/Open XA protocol which lets multiple, compliant, transaction resources (like a message queue and a database) participate in a single transaction. To do this, we've used the &lt;a href="http://www.atomikos.com/"&gt;Atomikos&lt;/a&gt; standalone JTA provider. We could have as easily used Bitronix, as well; both are auto-configured if you bring the appropriate starter along. In this example, in the &lt;code&gt;GreetingService&lt;/code&gt;, JMS and JPA work is done as part of a global transaction. We demonstrate this by creating 3 transactions and simulating a rollback on the third one. You should see printed to the console that there are two records that come back from the JDBC &lt;code&gt;javax.sql.DataSource&lt;/code&gt; data source and two records that are received from the embedded JMS &lt;code&gt;javax.jms.Destination&lt;/code&gt; destination.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-the-undertow-embedded-web-server" class="anchor" href="#the-undertow-embedded-web-server" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;The Undertow embedded web-server&lt;/h2&gt;

&lt;p&gt;This example also uses the Wildfly (from RedHat) application server's &lt;em&gt;awesome&lt;/em&gt; &lt;a href="http://undertow.io/"&gt;Undertow embedded HTTP server&lt;/a&gt; instead of (the default) Apache Tomcat. It's as easy to use Undertow as it is to use Jetty or Tomcat - just exclude &lt;code&gt;org.springframework.boot:spring-boot-starter-tomcat&lt;/code&gt; and add &lt;code&gt;org.springframework.boot:spring-boot-starter-undertow&lt;/code&gt;! This contribution originated as a third-party PR - thanks Ivan Sopov! It's awesome.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-odds-and-ends" class="anchor" href="#odds-and-ends" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Odds and Ends&lt;/h2&gt;

&lt;p&gt;Just for consistency, the example also uses JSR 330. JSR 330 describes a set of annotations that you can use in proprietary application servers like WebLogic as well as in a portable manner in dependency injection containers like Google Guice or Spring. I also use a JSR 250 annotation (defined as part of Java EE 5) to demonstrate lifecycle hooks.&lt;/p&gt;

&lt;p&gt;This example relies on a Spring Boot &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.RC2/reference/htmlsingle/#howto-configure-a-datasource"&gt;auto-configured and embedded&lt;/a&gt;, in-memory &lt;a href="http://www.h2database.com/html/main.html"&gt;H2&lt;/a&gt; &lt;code&gt;javax.sql.DataSource&lt;/code&gt; and - a Spring Boot &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.RC2/reference/htmlsingle/#boot-features-hornetq"&gt;auto-configured and embedded&lt;/a&gt;, in-memory &lt;a href="http://hornetq.jboss.org"&gt;HornetQ&lt;/a&gt; &lt;code&gt;javax.jms.ConnectionFactory&lt;/code&gt;. If you wanted to connect to traditional, non-embedded instances, it's straightforward to either specify properties in &lt;code&gt;application.yml&lt;/code&gt; or &lt;code&gt;application.properties&lt;/code&gt; like &lt;code&gt;spring.hornetq.host&lt;/code&gt; or simply define &lt;code&gt;@Bean&lt;/code&gt;s of the appropriate type.&lt;/p&gt;

&lt;p&gt;This example &lt;em&gt;also&lt;/em&gt; uses the new &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation which combines &lt;code&gt;@Configuration&lt;/code&gt;, &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt; and &lt;code&gt;@ComponentScan&lt;/code&gt;. Nice!&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-deployment" class="anchor" href="#deployment" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Though this example uses a lot of fairly familiar Java EE APIs, this is still just typical Spring Boot, so by default you can run this application using &lt;code&gt;java -jar ee.jar&lt;/code&gt; or easily deploy it to process-centric &lt;a href="http://en.wikipedia.org/wiki/Platform_as_a_service"&gt;platforms-as-a-service&lt;/a&gt; offerings like - Heroku or &lt;a href="http://cloudfoundry.org"&gt;Cloud Foundry&lt;/a&gt;. If you want to deploy it to a standalone application server like (like Apache Tomcat, or Websphere, or anything in between), it's straightforward to convert the build into a &lt;code&gt;.war&lt;/code&gt; and deploy it accordingly to any Servlet 3 container.&lt;/p&gt;

&lt;p&gt;If you deploy the application to a more classic application server, Spring Boot can take advantage of the AS's facilities, instead. For example, it's dead-simple to consume a JNDI-bound &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-jms-jndi"&gt;JMS &lt;code&gt;ConnectionFactory&lt;/code&gt;&lt;/a&gt;, &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#boot-features-connecting-to-a-jndi-datasource"&gt;JDBC &lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; or &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.BUILD-SNAPSHOT/reference/htmlsingle/#_using_a_java_ee_managed_transaction_manager"&gt;JTA &lt;code&gt;UserTransaction&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-spring-boot-12-choice-and-power" class="anchor" href="#spring-boot-12-choice-and-power" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Spring Boot 1.2: Choice &lt;em&gt;and&lt;/em&gt; Power&lt;/h2&gt;

&lt;p&gt;I, personally, would question a lot of these APIs. Do you &lt;em&gt;really&lt;/em&gt; need distributed, multi-resource transactions? In today's &lt;a href="http://www.eaipatterns.com/ramblings/18_starbucks.html"&gt;distributed world, consider global transaction managers are an architecture smell&lt;/a&gt;. Do you &lt;em&gt;really&lt;/em&gt; need to use JAX-RS when Spring offers a richer, integrated Spring MVC-based stack complete with MVC, REST, HATEOAS, OAuth and websockets support? JPA's a nice API for talking to a SQL-based &lt;code&gt;javax.sql.DataSource&lt;/code&gt;, but Spring Data repositories (which include support for JPA, of course, but &lt;em&gt;also&lt;/em&gt; for Cassandra, MongoDB, Redis, CouchBase, and an increasingly long list of alternative technologies) reduce much of the boilerplate to a simple interface definition for the common cases. So, do you really need all of this? It might well be that you do, and - as always - the choice is yours. That's why this release is so cool! More power, more choice. &lt;/p&gt;

&lt;h2&gt;
&lt;a id="user-content-what-else" class="anchor" href="#what-else" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What Else?&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;lot&lt;/em&gt;, actually. There are a &lt;em&gt;slew&lt;/em&gt; of new features. I couldn't even begin to cover them all here. So I won't try. Check out the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.2-Release-Notes"&gt;release notes&lt;/a&gt; for the full scoop! &lt;/p&gt;

&lt;p&gt;Spring Boot 1.2 is fast approaching GA, and now's a very good time to &lt;a href="http://start.spring.io"&gt;try the bits, kick the tires&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;file issues&lt;/a&gt; and &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;ask questions&lt;/a&gt;!&lt;/p&gt;</content>
  </entry>
</feed>

